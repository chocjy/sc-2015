%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 23 386 519 756
%%HiResBoundingBox: 23.000000 386.500000 518.500000 756.000000
%ADO_DSC_Encoding: MacOS Roman
%%Title: <FEFF5843535F7A695F6563536C616E695F6761526B6E335F5F326150747274696F69736E645F66657561746C702E6664090010CC0985752F72736C2F6269412F6F646562522F616565643972522F616565642F726E6965746C6C6E697875662F6E6F737400000064001C000000000000000072F0098100000000DC840990>
%%Creator: Adobe Acrobat 9.5.3
%%For: <FEFF696D656B697209009FAC097D071808A4A6BA08959FAC097DD6800931A010097D9FAC097D005D00000028003C4298F6DA00030000000C00000000000000000000000000000001000000000000>
%%CreationDate: 07/13/2015, 10:18:23 AM
%%CropBox: 0 360 576 792
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%EndComments
% EPSF created by ps2eps 1.61
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq{pop}{setblackgeneration}ifelse
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq{pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
currentglobal true setglobal
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
setglobal
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
currentglobal true setglobal
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 473 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-13:18:53        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:CreateDate="2015-07-10T17:54:52Z"
   xmp:ModifyDate="2015-07-10T17:54:52Z"
   pdf:Producer="Mac OS X 10.10.1 Quartz PDFContext"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>
% &end XMP packet& %
[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [612 792 ] >> setpagedevice
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 432 li
576 432 li
576 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 0 mo
576 0 li
576 431.94 li
0 431.94 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
72 43.2 mo
518.4 43.2 li
518.4 354.24 li
72 354.24 li
cp
f
72 354.24 mo
127.8 354.24 li
72 354.24 li
cp
.29749 .13431 1 .00180056 cmyk
f
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
72 354.24 mo
127.8 354.24 li
72 354.24 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
351 354.24 mo
406.8 354.24 li
406.8 353.791 li
351 353.791 li
cp
.29749 .13431 1 .00180056 cmyk
f
351 354.24 mo
406.8 354.24 li
406.8 353.791 li
351 353.791 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
72 354.24 mo
127.8 354.24 li
127.8 353.164 li
72 353.164 li
cp
.878965 .246067 1 .134279 cmyk
f
72 354.24 mo
127.8 354.24 li
127.8 353.164 li
72 353.164 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
351 353.79 mo
406.8 353.79 li
406.8 330.564 li
351 330.564 li
cp
.878965 .246067 1 .134279 cmyk
f
351 353.79 mo
406.8 353.79 li
406.8 330.564 li
351 330.564 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
72 353.164 mo
127.8 353.164 li
127.8 337.408 li
72 337.408 li
cp
.895628 .7673 0 0 cmyk
f
72 353.164 mo
127.8 353.164 li
127.8 337.408 li
72 337.408 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
351 330.565 mo
406.8 330.565 li
406.8 122.555 li
351 122.555 li
cp
.895628 .7673 0 0 cmyk
f
351 330.565 mo
406.8 330.565 li
406.8 122.555 li
351 122.555 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
72 337.408 mo
127.8 337.408 li
127.8 336.673 li
72 336.673 li
cp
0 .990631 1 .000396735 cmyk
f
72 337.408 mo
127.8 337.408 li
127.8 336.673 li
72 336.673 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
351 122.555 mo
406.8 122.555 li
406.8 114.998 li
351 114.998 li
cp
0 .990631 1 .000396735 cmyk
f
351 122.555 mo
406.8 122.555 li
406.8 114.998 li
351 114.998 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
127.8 354.24 mo
183.6 354.24 li
127.8 354.24 li
cp
.29749 .13431 1 .00180056 cmyk
f
127.8 354.24 mo
183.6 354.24 li
127.8 354.24 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
406.8 354.24 mo
462.6 354.24 li
462.6 352.828 li
406.8 352.828 li
cp
.29749 .13431 1 .00180056 cmyk
f
406.8 354.24 mo
462.6 354.24 li
462.6 352.828 li
406.8 352.828 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
127.8 354.24 mo
183.6 354.24 li
183.6 351.363 li
127.8 351.363 li
cp
.878965 .246067 1 .134279 cmyk
f
127.8 354.24 mo
183.6 354.24 li
183.6 351.363 li
127.8 351.363 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
406.8 352.827 mo
462.6 352.827 li
462.6 345.864 li
406.8 345.864 li
cp
.878965 .246067 1 .134279 cmyk
f
406.8 352.827 mo
462.6 352.827 li
462.6 345.864 li
406.8 345.864 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
127.8 351.363 mo
183.6 351.363 li
183.6 337.627 li
127.8 337.627 li
cp
.895628 .7673 0 0 cmyk
f
127.8 351.363 mo
183.6 351.363 li
183.6 337.627 li
127.8 337.627 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
406.8 345.864 mo
462.6 345.864 li
462.6 147.952 li
406.8 147.952 li
cp
.895628 .7673 0 0 cmyk
f
406.8 345.864 mo
462.6 345.864 li
462.6 147.952 li
406.8 147.952 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
127.8 337.626 mo
183.6 337.626 li
183.6 336.701 li
127.8 336.701 li
cp
0 .990631 1 .000396735 cmyk
f
127.8 337.626 mo
183.6 337.626 li
183.6 336.701 li
127.8 336.701 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
406.8 147.952 mo
462.6 147.952 li
462.6 137.64 li
406.8 137.64 li
cp
0 .990631 1 .000396735 cmyk
f
406.8 147.952 mo
462.6 147.952 li
462.6 137.64 li
406.8 137.64 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
gsave
72 354.24 mo
518.4 354.24 li
518.4 43.24 li
72 43.24 li
cp
clp
183.6 354.24 mo
239.4 354.24 li
239.4 353.5 li
183.6 353.5 li
cp
.29749 .13431 1 .00180056 cmyk
f
183.6 354.24 mo
239.4 354.24 li
239.4 353.5 li
183.6 353.5 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
462.6 354.24 mo
518.4 354.24 li
518.4 353.226 li
462.6 353.226 li
cp
.29749 .13431 1 .00180056 cmyk
f
462.6 354.24 mo
518.4 354.24 li
518.4 353.226 li
462.6 353.226 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
183.6 353.5 mo
239.4 353.5 li
239.4 352.717 li
183.6 352.717 li
cp
.878965 .246067 1 .134279 cmyk
f
183.6 353.5 mo
239.4 353.5 li
239.4 352.717 li
183.6 352.717 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
462.6 353.226 mo
518.4 353.226 li
518.4 337.938 li
462.6 337.938 li
cp
.878965 .246067 1 .134279 cmyk
f
462.6 353.226 mo
518.4 353.226 li
518.4 337.938 li
462.6 337.938 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
183.6 352.717 mo
239.4 352.717 li
239.4 335.73 li
183.6 335.73 li
cp
.895628 .7673 0 0 cmyk
f
183.6 352.717 mo
239.4 352.717 li
239.4 335.73 li
183.6 335.73 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
462.6 337.938 mo
518.4 337.938 li
518.4 57.058 li
462.6 57.058 li
cp
.895628 .7673 0 0 cmyk
f
462.6 337.938 mo
518.4 337.938 li
518.4 57.058 li
462.6 57.058 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
183.6 335.729 mo
239.4 335.729 li
239.4 334.678 li
183.6 334.678 li
cp
0 .990631 1 .000396735 cmyk
f
183.6 335.729 mo
239.4 335.729 li
239.4 334.678 li
183.6 334.678 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
462.6 57.058 mo
518.4 57.058 li
518.4 47.377 li
462.6 47.377 li
cp
0 .990631 1 .000396735 cmyk
f
462.6 57.058 mo
518.4 57.058 li
518.4 47.377 li
462.6 47.377 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
0 432 mo
576 432 li
576 0 li
0 0 li
cp
clp
183.6 354.24 mo
183.6 350.24 li
f
.5 lw
183.6 354.24 mo
183.6 350.24 li
@
183.6 43.2 mo
183.6 47.2 li
f
183.6 43.2 mo
183.6 47.2 li
@
163.377 366.369 mo
165.309 366.369 li
165.309 359.697 li
163.209 360.117 li
163.209 359.037 li
165.297 358.617 li
166.485 358.617 li
166.485 366.369 li
168.417 366.369 li
168.417 367.365 li
163.377 367.365 li
163.377 366.369 li
ef
173.338 359.397 mo
172.726 359.397 172.27 359.697 171.958 360.297 cv
171.646 360.897 171.502 361.797 171.502 362.997 cv
171.502 364.197 171.646 365.097 171.958 365.697 cv
172.27 366.297 172.726 366.597 173.338 366.597 cv
173.95 366.597 174.406 366.297 174.718 365.697 cv
175.018 365.097 175.174 364.197 175.174 362.997 cv
175.174 361.797 175.018 360.897 174.718 360.297 cv
174.406 359.697 173.95 359.397 173.338 359.397 cv
173.338 358.461 mo
174.31 358.461 175.054 358.857 175.582 359.625 cv
176.098 360.405 176.362 361.533 176.362 362.997 cv
176.362 364.473 176.098 365.601 175.582 366.369 cv
175.054 367.137 174.31 367.521 173.338 367.521 cv
172.354 367.521 171.598 367.137 171.082 366.369 cv
170.566 365.601 170.314 364.473 170.314 362.997 cv
170.314 361.533 170.566 360.405 171.082 359.625 cv
171.598 358.857 172.354 358.461 173.338 358.461 cv
ef
180.971 359.397 mo
180.359 359.397 179.904 359.697 179.592 360.297 cv
179.279 360.897 179.135 361.797 179.135 362.997 cv
179.135 364.197 179.279 365.097 179.592 365.697 cv
179.904 366.297 180.359 366.597 180.971 366.597 cv
181.583 366.597 182.04 366.297 182.352 365.697 cv
182.652 365.097 182.807 364.197 182.807 362.997 cv
182.807 361.797 182.652 360.897 182.352 360.297 cv
182.04 359.697 181.583 359.397 180.971 359.397 cv
180.971 358.461 mo
181.943 358.461 182.688 358.857 183.215 359.625 cv
183.732 360.405 183.995 361.533 183.995 362.997 cv
183.995 364.473 183.732 365.601 183.215 366.369 cv
182.688 367.137 181.943 367.521 180.971 367.521 cv
179.988 367.521 179.232 367.137 178.715 366.369 cv
178.199 365.601 177.947 364.473 177.947 362.997 cv
177.947 361.533 178.199 360.405 178.715 359.625 cv
179.232 358.857 179.988 358.461 180.971 358.461 cv
ef
195.745 366.117 mo
195.745 363.765 li
193.813 363.765 li
193.813 362.793 li
196.921 362.793 li
196.921 366.549 li
196.465 366.885 195.961 367.125 195.409 367.281 cv
194.857 367.437 194.269 367.521 193.645 367.521 cv
192.277 367.521 191.197 367.125 190.429 366.333 cv
189.661 365.541 189.277 364.425 189.277 362.997 cv
189.277 361.581 189.661 360.465 190.429 359.661 cv
191.197 358.869 192.277 358.461 193.645 358.461 cv
194.209 358.461 194.749 358.533 195.265 358.677 cv
195.781 358.821 196.261 359.025 196.693 359.289 cv
196.693 360.549 li
196.249 360.189 195.781 359.913 195.289 359.721 cv
194.797 359.529 194.281 359.433 193.741 359.433 cv
192.661 359.433 191.857 359.733 191.329 360.333 cv
190.789 360.933 190.525 361.821 190.525 362.997 cv
190.525 364.185 190.789 365.073 191.329 365.673 cv
191.857 366.273 192.661 366.561 193.741 366.561 cv
194.149 366.561 194.521 366.525 194.857 366.453 cv
195.193 366.381 195.481 366.273 195.745 366.117 cv
ef
200.27 363.189 mo
200.27 366.393 li
202.166 366.393 li
202.802 366.393 203.27 366.261 203.582 365.997 cv
203.882 365.733 204.038 365.337 204.038 364.785 cv
204.038 364.245 203.882 363.849 203.582 363.585 cv
203.27 363.321 202.802 363.189 202.166 363.189 cv
200.27 363.189 li
200.27 359.589 mo
200.27 362.229 li
202.022 362.229 li
202.598 362.229 203.018 362.121 203.306 361.905 cv
203.594 361.689 203.738 361.365 203.738 360.909 cv
203.738 360.477 203.594 360.141 203.306 359.925 cv
203.018 359.709 202.598 359.589 202.022 359.589 cv
200.27 359.589 li
199.082 358.617 mo
202.106 358.617 li
203.006 358.617 203.702 358.809 204.194 359.181 cv
204.674 359.565 204.926 360.093 204.926 360.777 cv
204.926 361.317 204.794 361.749 204.542 362.061 cv
204.29 362.373 203.93 362.577 203.45 362.649 cv
204.026 362.781 204.482 363.045 204.806 363.441 cv
205.118 363.837 205.286 364.329 205.286 364.917 cv
205.286 365.709 205.01 366.309 204.482 366.729 cv
203.954 367.161 203.198 367.365 202.226 367.365 cv
199.082 367.365 li
199.082 358.617 li
ef
462.6 354.24 mo
462.6 350.24 li
f
462.6 354.24 mo
462.6 350.24 li
@
462.6 43.2 mo
462.6 47.2 li
f
462.6 43.2 mo
462.6 47.2 li
@
453.565 366.369 mo
455.497 366.369 li
455.497 359.697 li
453.397 360.117 li
453.397 359.037 li
455.485 358.617 li
456.673 358.617 li
456.673 366.369 li
458.605 366.369 li
458.605 367.365 li
453.565 367.365 li
453.565 366.369 li
ef
459.685 358.617 mo
467.077 358.617 li
467.077 359.613 li
463.969 359.613 li
463.969 367.365 li
462.781 367.365 li
462.781 359.613 li
459.685 359.613 li
459.685 358.617 li
ef
469.405 363.189 mo
469.405 366.393 li
471.301 366.393 li
471.937 366.393 472.405 366.261 472.717 365.997 cv
473.017 365.733 473.173 365.337 473.173 364.785 cv
473.173 364.245 473.017 363.849 472.717 363.585 cv
472.405 363.321 471.937 363.189 471.301 363.189 cv
469.405 363.189 li
469.405 359.589 mo
469.405 362.229 li
471.157 362.229 li
471.733 362.229 472.153 362.121 472.441 361.905 cv
472.729 361.689 472.873 361.365 472.873 360.909 cv
472.873 360.477 472.729 360.141 472.441 359.925 cv
472.153 359.709 471.733 359.589 471.157 359.589 cv
469.405 359.589 li
468.217 358.617 mo
471.241 358.617 li
472.141 358.617 472.837 358.809 473.329 359.181 cv
473.809 359.565 474.061 360.093 474.061 360.777 cv
474.061 361.317 473.929 361.749 473.677 362.061 cv
473.425 362.373 473.065 362.577 472.585 362.649 cv
473.161 362.781 473.617 363.045 473.941 363.441 cv
474.253 363.837 474.421 364.329 474.421 364.917 cv
474.421 365.709 474.145 366.309 473.617 366.729 cv
473.089 367.161 472.333 367.365 471.361 367.365 cv
468.217 367.365 li
468.217 358.617 li
ef
72 354.24 mo
76 354.24 li
f
72 354.24 mo
76 354.24 li
@
518.4 354.24 mo
514.4 354.24 li
f
518.4 354.24 mo
514.4 354.24 li
@
65.7691 349.585 mo
65.1571 349.585 64.7011 349.884 64.3891 350.484 cv
64.0771 351.085 63.9331 351.984 63.9331 353.184 cv
63.9331 354.384 64.0771 355.284 64.3891 355.884 cv
64.7011 356.484 65.1571 356.784 65.7691 356.784 cv
66.3811 356.784 66.8371 356.484 67.1491 355.884 cv
67.4491 355.284 67.6051 354.384 67.6051 353.184 cv
67.6051 351.984 67.4491 351.085 67.1491 350.484 cv
66.8371 349.884 66.3811 349.585 65.7691 349.585 cv
65.7691 348.648 mo
66.7411 348.648 67.4851 349.044 68.0131 349.813 cv
68.5291 350.592 68.7931 351.72 68.7931 353.184 cv
68.7931 354.66 68.5291 355.788 68.0131 356.556 cv
67.4851 357.324 66.7411 357.708 65.7691 357.708 cv
64.7851 357.708 64.0291 357.324 63.5131 356.556 cv
62.9971 355.788 62.7451 354.66 62.7451 353.184 cv
62.7451 351.72 62.9971 350.592 63.5131 349.813 cv
64.0291 349.044 64.7851 348.648 65.7691 348.648 cv
ef
72 319.68 mo
76 319.68 li
f
72 319.68 mo
76 319.68 li
@
518.4 319.68 mo
514.4 319.68 li
f
518.4 319.68 mo
514.4 319.68 li
@
49.054 321.996 mo
53.182 321.996 li
53.182 322.992 li
47.626 322.992 li
47.626 321.996 li
48.07 321.54 48.682 320.916 49.462 320.124 cv
50.23 319.344 50.722 318.84 50.926 318.612 cv
51.31 318.192 51.574 317.832 51.718 317.533 cv
51.862 317.244 51.946 316.944 51.946 316.656 cv
51.946 316.201 51.778 315.816 51.454 315.529 cv
51.13 315.24 50.71 315.085 50.182 315.085 cv
49.81 315.085 49.414 315.156 49.006 315.276 cv
48.598 315.408 48.154 315.6 47.686 315.865 cv
47.686 314.664 li
48.166 314.473 48.61 314.328 49.018 314.232 cv
49.426 314.136 49.81 314.089 50.158 314.089 cv
51.058 314.089 51.778 314.316 52.318 314.772 cv
52.858 315.228 53.134 315.828 53.134 316.585 cv
53.134 316.944 53.062 317.292 52.93 317.604 cv
52.798 317.928 52.558 318.313 52.198 318.744 cv
52.102 318.865 51.79 319.188 51.262 319.728 cv
50.734 320.268 50.002 321.024 49.054 321.996 cv
ef
58.2004 315.024 mo
57.5884 315.024 57.1324 315.324 56.8204 315.924 cv
56.5084 316.524 56.3644 317.424 56.3644 318.624 cv
56.3644 319.824 56.5084 320.724 56.8204 321.324 cv
57.1324 321.924 57.5884 322.224 58.2004 322.224 cv
58.8124 322.224 59.2684 321.924 59.5804 321.324 cv
59.8804 320.724 60.0364 319.824 60.0364 318.624 cv
60.0364 317.424 59.8804 316.524 59.5804 315.924 cv
59.2684 315.324 58.8124 315.024 58.2004 315.024 cv
58.2004 314.089 mo
59.1724 314.089 59.9164 314.484 60.4444 315.253 cv
60.9604 316.033 61.2244 317.16 61.2244 318.624 cv
61.2244 320.1 60.9604 321.228 60.4444 321.996 cv
59.9164 322.764 59.1724 323.148 58.2004 323.148 cv
57.2164 323.148 56.4604 322.764 55.9444 321.996 cv
55.4284 321.228 55.1764 320.1 55.1764 318.624 cv
55.1764 317.16 55.4284 316.033 55.9444 315.253 cv
56.4604 314.484 57.2164 314.089 58.2004 314.089 cv
ef
65.8348 315.024 mo
65.2228 315.024 64.7668 315.324 64.4548 315.924 cv
64.1428 316.524 63.9988 317.424 63.9988 318.624 cv
63.9988 319.824 64.1428 320.724 64.4548 321.324 cv
64.7668 321.924 65.2228 322.224 65.8348 322.224 cv
66.4468 322.224 66.9028 321.924 67.2148 321.324 cv
67.5148 320.724 67.6708 319.824 67.6708 318.624 cv
67.6708 317.424 67.5148 316.524 67.2148 315.924 cv
66.9028 315.324 66.4468 315.024 65.8348 315.024 cv
65.8348 314.089 mo
66.8068 314.089 67.5508 314.484 68.0788 315.253 cv
68.5948 316.033 68.8588 317.16 68.8588 318.624 cv
68.8588 320.1 68.5948 321.228 68.0788 321.996 cv
67.5508 322.764 66.8068 323.148 65.8348 323.148 cv
64.8508 323.148 64.0948 322.764 63.5788 321.996 cv
63.0628 321.228 62.8108 320.1 62.8108 318.624 cv
62.8108 317.16 63.0628 316.033 63.5788 315.253 cv
64.0948 314.484 64.8508 314.089 65.8348 314.089 cv
ef
72 285.12 mo
76 285.12 li
f
72 285.12 mo
76 285.12 li
@
518.4 285.12 mo
514.4 285.12 li
f
518.4 285.12 mo
514.4 285.12 li
@
51.0047 280.716 mo
48.0167 285.384 li
51.0047 285.384 li
51.0047 280.716 li
50.6927 279.684 mo
52.1807 279.684 li
52.1807 285.384 li
53.4287 285.384 li
53.4287 286.368 li
52.1807 286.368 li
52.1807 288.432 li
51.0047 288.432 li
51.0047 286.368 li
47.0567 286.368 li
47.0567 285.228 li
50.6927 279.684 li
ef
57.9191 280.464 mo
57.3071 280.464 56.8511 280.764 56.5391 281.365 cv
56.2271 281.964 56.0831 282.865 56.0831 284.064 cv
56.0831 285.264 56.2271 286.164 56.5391 286.764 cv
56.8511 287.365 57.3071 287.664 57.9191 287.664 cv
58.5311 287.664 58.9871 287.365 59.2991 286.764 cv
59.5991 286.164 59.7551 285.264 59.7551 284.064 cv
59.7551 282.865 59.5991 281.964 59.2991 281.365 cv
58.9871 280.764 58.5311 280.464 57.9191 280.464 cv
57.9191 279.529 mo
58.8911 279.529 59.6351 279.924 60.1631 280.693 cv
60.6791 281.473 60.9431 282.6 60.9431 284.064 cv
60.9431 285.54 60.6791 286.668 60.1631 287.436 cv
59.6351 288.204 58.8911 288.589 57.9191 288.589 cv
56.9351 288.589 56.1791 288.204 55.6631 287.436 cv
55.1471 286.668 54.8951 285.54 54.8951 284.064 cv
54.8951 282.6 55.1471 281.473 55.6631 280.693 cv
56.1791 279.924 56.9351 279.529 57.9191 279.529 cv
ef
65.5535 280.464 mo
64.9415 280.464 64.4855 280.764 64.1735 281.365 cv
63.8615 281.964 63.7175 282.865 63.7175 284.064 cv
63.7175 285.264 63.8615 286.164 64.1735 286.764 cv
64.4855 287.365 64.9415 287.664 65.5535 287.664 cv
66.1655 287.664 66.6215 287.365 66.9335 286.764 cv
67.2335 286.164 67.3895 285.264 67.3895 284.064 cv
67.3895 282.865 67.2335 281.964 66.9335 281.365 cv
66.6215 280.764 66.1655 280.464 65.5535 280.464 cv
65.5535 279.529 mo
66.5255 279.529 67.2695 279.924 67.7975 280.693 cv
68.3135 281.473 68.5775 282.6 68.5775 284.064 cv
68.5775 285.54 68.3135 286.668 67.7975 287.436 cv
67.2695 288.204 66.5255 288.589 65.5535 288.589 cv
64.5695 288.589 63.8135 288.204 63.2975 287.436 cv
62.7815 286.668 62.5295 285.54 62.5295 284.064 cv
62.5295 282.6 62.7815 281.473 63.2975 280.693 cv
63.8135 279.924 64.5695 279.529 65.5535 279.529 cv
ef
72 250.56 mo
76 250.56 li
f
72 250.56 mo
76 250.56 li
@
518.4 250.56 mo
514.4 250.56 li
f
518.4 250.56 mo
514.4 250.56 li
@
50.6787 249.025 mo
50.1507 249.025 49.7307 249.217 49.4187 249.577 cv
49.1067 249.936 48.9507 250.441 48.9507 251.064 cv
48.9507 251.701 49.1067 252.204 49.4187 252.564 cv
49.7307 252.924 50.1507 253.105 50.6787 253.105 cv
51.2067 253.105 51.6267 252.924 51.9387 252.564 cv
52.2507 252.204 52.4067 251.701 52.4067 251.064 cv
52.4067 250.441 52.2507 249.936 51.9387 249.577 cv
51.6267 249.217 51.2067 249.025 50.6787 249.025 cv
53.0307 245.316 mo
53.0307 246.396 li
52.7307 246.253 52.4307 246.145 52.1307 246.072 cv
51.8187 246.001 51.5187 245.964 51.2307 245.964 cv
50.4387 245.964 49.8387 246.229 49.4307 246.757 cv
49.0227 247.285 48.7827 248.089 48.7347 249.145 cv
48.9627 248.809 49.2507 248.544 49.5987 248.365 cv
49.9467 248.184 50.3307 248.089 50.7507 248.089 cv
51.6267 248.089 52.3227 248.365 52.8267 248.893 cv
53.3307 249.421 53.5947 250.152 53.5947 251.064 cv
53.5947 251.964 53.3187 252.684 52.7907 253.225 cv
52.2627 253.764 51.5547 254.029 50.6787 254.029 cv
49.6707 254.029 48.8907 253.645 48.3627 252.876 cv
47.8227 252.109 47.5587 250.98 47.5587 249.505 cv
47.5587 248.124 47.8827 247.02 48.5427 246.204 cv
49.1907 245.389 50.0787 244.969 51.1827 244.969 cv
51.4707 244.969 51.7707 245.005 52.0827 245.053 cv
52.3827 245.113 52.6947 245.197 53.0307 245.316 cv
ef
58.1691 245.904 mo
57.5571 245.904 57.1011 246.204 56.7891 246.805 cv
56.4771 247.404 56.3331 248.305 56.3331 249.505 cv
56.3331 250.704 56.4771 251.605 56.7891 252.204 cv
57.1011 252.805 57.5571 253.105 58.1691 253.105 cv
58.7811 253.105 59.2371 252.805 59.5491 252.204 cv
59.8491 251.605 60.0051 250.704 60.0051 249.505 cv
60.0051 248.305 59.8491 247.404 59.5491 246.805 cv
59.2371 246.204 58.7811 245.904 58.1691 245.904 cv
58.1691 244.969 mo
59.1411 244.969 59.8851 245.365 60.4131 246.133 cv
60.9291 246.913 61.1931 248.04 61.1931 249.505 cv
61.1931 250.98 60.9291 252.109 60.4131 252.876 cv
59.8851 253.645 59.1411 254.029 58.1691 254.029 cv
57.1851 254.029 56.4291 253.645 55.9131 252.876 cv
55.3971 252.109 55.1451 250.98 55.1451 249.505 cv
55.1451 248.04 55.3971 246.913 55.9131 246.133 cv
56.4291 245.365 57.1851 244.969 58.1691 244.969 cv
ef
65.8035 245.904 mo
65.1915 245.904 64.7355 246.204 64.4235 246.805 cv
64.1115 247.404 63.9675 248.305 63.9675 249.505 cv
63.9675 250.704 64.1115 251.605 64.4235 252.204 cv
64.7355 252.805 65.1915 253.105 65.8035 253.105 cv
66.4155 253.105 66.8715 252.805 67.1835 252.204 cv
67.4835 251.605 67.6395 250.704 67.6395 249.505 cv
67.6395 248.305 67.4835 247.404 67.1835 246.805 cv
66.8715 246.204 66.4155 245.904 65.8035 245.904 cv
65.8035 244.969 mo
66.7755 244.969 67.5195 245.365 68.0475 246.133 cv
68.5635 246.913 68.8275 248.04 68.8275 249.505 cv
68.8275 250.98 68.5635 252.109 68.0475 252.876 cv
67.5195 253.645 66.7755 254.029 65.8035 254.029 cv
64.8195 254.029 64.0635 253.645 63.5475 252.876 cv
63.0315 252.109 62.7795 250.98 62.7795 249.505 cv
62.7795 248.04 63.0315 246.913 63.5475 246.133 cv
64.0635 245.365 64.8195 244.969 65.8035 244.969 cv
ef
72 216 mo
76 216 li
f
72 216 mo
76 216 li
@
518.4 216 mo
514.4 216 li
f
518.4 216 mo
514.4 216 li
@
50.5035 215.161 mo
49.9395 215.161 49.4955 215.316 49.1715 215.617 cv
48.8475 215.917 48.6915 216.324 48.6915 216.852 cv
48.6915 217.38 48.8475 217.801 49.1715 218.1 cv
49.4955 218.4 49.9395 218.544 50.5035 218.544 cv
51.0555 218.544 51.4995 218.4 51.8235 218.089 cv
52.1475 217.788 52.3155 217.38 52.3155 216.852 cv
52.3155 216.324 52.1475 215.917 51.8355 215.617 cv
51.5115 215.316 51.0675 215.161 50.5035 215.161 cv
49.3155 214.656 mo
48.8115 214.536 48.4155 214.296 48.1275 213.949 cv
47.8395 213.6 47.7075 213.18 47.7075 212.676 cv
47.7075 211.98 47.9475 211.428 48.4515 211.02 cv
48.9435 210.613 49.6275 210.408 50.5035 210.408 cv
51.3675 210.408 52.0515 210.613 52.5555 211.02 cv
53.0475 211.428 53.2995 211.98 53.2995 212.676 cv
53.2995 213.18 53.1555 213.6 52.8675 213.949 cv
52.5795 214.296 52.1955 214.536 51.6915 214.656 cv
52.2555 214.788 52.6995 215.053 53.0235 215.436 cv
53.3355 215.82 53.5035 216.301 53.5035 216.852 cv
53.5035 217.704 53.2395 218.352 52.7235 218.796 cv
52.1955 219.253 51.4635 219.469 50.5035 219.469 cv
49.5315 219.469 48.7875 219.253 48.2715 218.796 cv
47.7555 218.352 47.5035 217.704 47.5035 216.852 cv
47.5035 216.301 47.6595 215.82 47.9835 215.436 cv
48.2955 215.053 48.7395 214.788 49.3155 214.656 cv
48.8835 212.785 mo
48.8835 213.24 49.0155 213.6 49.3035 213.852 cv
49.5915 214.105 49.9875 214.225 50.5035 214.225 cv
51.0075 214.225 51.4035 214.105 51.6915 213.852 cv
51.9795 213.6 52.1235 213.24 52.1235 212.785 cv
52.1235 212.329 51.9795 211.98 51.6915 211.729 cv
51.4035 211.477 51.0075 211.344 50.5035 211.344 cv
49.9875 211.344 49.5915 211.477 49.3035 211.729 cv
49.0155 211.98 48.8835 212.329 48.8835 212.785 cv
ef
58.1379 211.344 mo
57.5259 211.344 57.0699 211.645 56.7579 212.245 cv
56.4459 212.844 56.3019 213.745 56.3019 214.945 cv
56.3019 216.145 56.4459 217.044 56.7579 217.645 cv
57.0699 218.245 57.5259 218.544 58.1379 218.544 cv
58.7499 218.544 59.2059 218.245 59.5179 217.645 cv
59.8179 217.044 59.9739 216.145 59.9739 214.945 cv
59.9739 213.745 59.8179 212.844 59.5179 212.245 cv
59.2059 211.645 58.7499 211.344 58.1379 211.344 cv
58.1379 210.408 mo
59.1099 210.408 59.8539 210.805 60.3819 211.572 cv
60.8979 212.352 61.1619 213.48 61.1619 214.945 cv
61.1619 216.421 60.8979 217.548 60.3819 218.316 cv
59.8539 219.085 59.1099 219.469 58.1379 219.469 cv
57.1539 219.469 56.3979 219.085 55.8819 218.316 cv
55.3659 217.548 55.1139 216.421 55.1139 214.945 cv
55.1139 213.48 55.3659 212.352 55.8819 211.572 cv
56.3979 210.805 57.1539 210.408 58.1379 210.408 cv
ef
65.7723 211.344 mo
65.1603 211.344 64.7043 211.645 64.3923 212.245 cv
64.0803 212.844 63.9363 213.745 63.9363 214.945 cv
63.9363 216.145 64.0803 217.044 64.3923 217.645 cv
64.7043 218.245 65.1603 218.544 65.7723 218.544 cv
66.3843 218.544 66.8403 218.245 67.1523 217.645 cv
67.4523 217.044 67.6083 216.145 67.6083 214.945 cv
67.6083 213.745 67.4523 212.844 67.1523 212.245 cv
66.8403 211.645 66.3843 211.344 65.7723 211.344 cv
65.7723 210.408 mo
66.7443 210.408 67.4883 210.805 68.0163 211.572 cv
68.5323 212.352 68.7963 213.48 68.7963 214.945 cv
68.7963 216.421 68.5323 217.548 68.0163 218.316 cv
67.4883 219.085 66.7443 219.469 65.7723 219.469 cv
64.7883 219.469 64.0323 219.085 63.5163 218.316 cv
63.0003 217.548 62.7483 216.421 62.7483 214.945 cv
62.7483 213.48 63.0003 212.352 63.5163 211.572 cv
64.0323 210.805 64.7883 210.408 65.7723 210.408 cv
ef
72 181.44 mo
76 181.44 li
f
72 181.44 mo
76 181.44 li
@
518.4 181.44 mo
514.4 181.44 li
f
518.4 181.44 mo
514.4 181.44 li
@
41.0349 183.757 mo
42.9669 183.757 li
42.9669 177.085 li
40.8669 177.505 li
40.8669 176.424 li
42.9549 176.005 li
44.1429 176.005 li
44.1429 183.757 li
46.0749 183.757 li
46.0749 184.753 li
41.0349 184.753 li
41.0349 183.757 li
ef
50.9973 176.785 mo
50.3853 176.785 49.9293 177.085 49.6173 177.684 cv
49.3053 178.285 49.1613 179.184 49.1613 180.385 cv
49.1613 181.585 49.3053 182.484 49.6173 183.085 cv
49.9293 183.684 50.3853 183.984 50.9973 183.984 cv
51.6093 183.984 52.0653 183.684 52.3773 183.085 cv
52.6773 182.484 52.8333 181.585 52.8333 180.385 cv
52.8333 179.184 52.6773 178.285 52.3773 177.684 cv
52.0653 177.085 51.6093 176.785 50.9973 176.785 cv
50.9973 175.849 mo
51.9693 175.849 52.7133 176.245 53.2413 177.012 cv
53.7573 177.792 54.0213 178.921 54.0213 180.385 cv
54.0213 181.861 53.7573 182.988 53.2413 183.757 cv
52.7133 184.525 51.9693 184.908 50.9973 184.908 cv
50.0133 184.908 49.2573 184.525 48.7413 183.757 cv
48.2253 182.988 47.9733 181.861 47.9733 180.385 cv
47.9733 178.921 48.2253 177.792 48.7413 177.012 cv
49.2573 176.245 50.0133 175.849 50.9973 175.849 cv
ef
58.6317 176.785 mo
58.0197 176.785 57.5637 177.085 57.2517 177.684 cv
56.9397 178.285 56.7957 179.184 56.7957 180.385 cv
56.7957 181.585 56.9397 182.484 57.2517 183.085 cv
57.5637 183.684 58.0197 183.984 58.6317 183.984 cv
59.2437 183.984 59.6997 183.684 60.0117 183.085 cv
60.3117 182.484 60.4677 181.585 60.4677 180.385 cv
60.4677 179.184 60.3117 178.285 60.0117 177.684 cv
59.6997 177.085 59.2437 176.785 58.6317 176.785 cv
58.6317 175.849 mo
59.6037 175.849 60.3477 176.245 60.8757 177.012 cv
61.3917 177.792 61.6557 178.921 61.6557 180.385 cv
61.6557 181.861 61.3917 182.988 60.8757 183.757 cv
60.3477 184.525 59.6037 184.908 58.6317 184.908 cv
57.6477 184.908 56.8917 184.525 56.3757 183.757 cv
55.8597 182.988 55.6077 181.861 55.6077 180.385 cv
55.6077 178.921 55.8597 177.792 56.3757 177.012 cv
56.8917 176.245 57.6477 175.849 58.6317 175.849 cv
ef
66.2661 176.785 mo
65.6541 176.785 65.1981 177.085 64.8861 177.684 cv
64.5741 178.285 64.4301 179.184 64.4301 180.385 cv
64.4301 181.585 64.5741 182.484 64.8861 183.085 cv
65.1981 183.684 65.6541 183.984 66.2661 183.984 cv
66.8781 183.984 67.3341 183.684 67.6461 183.085 cv
67.9461 182.484 68.1021 181.585 68.1021 180.385 cv
68.1021 179.184 67.9461 178.285 67.6461 177.684 cv
67.3341 177.085 66.8781 176.785 66.2661 176.785 cv
66.2661 175.849 mo
67.2381 175.849 67.9821 176.245 68.5101 177.012 cv
69.0261 177.792 69.2901 178.921 69.2901 180.385 cv
69.2901 181.861 69.0261 182.988 68.5101 183.757 cv
67.9821 184.525 67.2381 184.908 66.2661 184.908 cv
65.2821 184.908 64.5261 184.525 64.0101 183.757 cv
63.4941 182.988 63.2421 181.861 63.2421 180.385 cv
63.2421 178.921 63.4941 177.792 64.0101 177.012 cv
64.5261 176.245 65.2821 175.849 66.2661 175.849 cv
ef
72 146.88 mo
76 146.88 li
f
72 146.88 mo
76 146.88 li
@
518.4 146.88 mo
514.4 146.88 li
f
518.4 146.88 mo
514.4 146.88 li
@
41.0349 149.197 mo
42.9669 149.197 li
42.9669 142.525 li
40.8669 142.944 li
40.8669 141.865 li
42.9549 141.444 li
44.1429 141.444 li
44.1429 149.197 li
46.0749 149.197 li
46.0749 150.193 li
41.0349 150.193 li
41.0349 149.197 li
ef
49.4853 149.197 mo
53.6133 149.197 li
53.6133 150.193 li
48.0573 150.193 li
48.0573 149.197 li
48.5013 148.741 49.1133 148.116 49.8933 147.324 cv
50.6613 146.544 51.1533 146.04 51.3573 145.813 cv
51.7413 145.392 52.0053 145.033 52.1493 144.733 cv
52.2933 144.444 52.3773 144.145 52.3773 143.857 cv
52.3773 143.401 52.2093 143.017 51.8853 142.728 cv
51.5613 142.44 51.1413 142.284 50.6133 142.284 cv
50.2413 142.284 49.8453 142.357 49.4373 142.477 cv
49.0293 142.608 48.5853 142.801 48.1173 143.065 cv
48.1173 141.865 li
48.5973 141.672 49.0413 141.529 49.4493 141.432 cv
49.8573 141.336 50.2413 141.289 50.5893 141.289 cv
51.4893 141.289 52.2093 141.517 52.7493 141.973 cv
53.2893 142.428 53.5653 143.029 53.5653 143.784 cv
53.5653 144.145 53.4933 144.492 53.3613 144.805 cv
53.2293 145.129 52.9893 145.513 52.6293 145.944 cv
52.5333 146.065 52.2213 146.388 51.6933 146.928 cv
51.1653 147.469 50.4333 148.224 49.4853 149.197 cv
ef
58.6317 142.224 mo
58.0197 142.224 57.5637 142.525 57.2517 143.125 cv
56.9397 143.724 56.7957 144.625 56.7957 145.824 cv
56.7957 147.025 56.9397 147.924 57.2517 148.525 cv
57.5637 149.125 58.0197 149.424 58.6317 149.424 cv
59.2437 149.424 59.6997 149.125 60.0117 148.525 cv
60.3117 147.924 60.4677 147.025 60.4677 145.824 cv
60.4677 144.625 60.3117 143.724 60.0117 143.125 cv
59.6997 142.525 59.2437 142.224 58.6317 142.224 cv
58.6317 141.289 mo
59.6037 141.289 60.3477 141.685 60.8757 142.453 cv
61.3917 143.233 61.6557 144.361 61.6557 145.824 cv
61.6557 147.301 61.3917 148.428 60.8757 149.197 cv
60.3477 149.965 59.6037 150.349 58.6317 150.349 cv
57.6477 150.349 56.8917 149.965 56.3757 149.197 cv
55.8597 148.428 55.6077 147.301 55.6077 145.824 cv
55.6077 144.361 55.8597 143.233 56.3757 142.453 cv
56.8917 141.685 57.6477 141.289 58.6317 141.289 cv
ef
66.2661 142.224 mo
65.6541 142.224 65.1981 142.525 64.8861 143.125 cv
64.5741 143.724 64.4301 144.625 64.4301 145.824 cv
64.4301 147.025 64.5741 147.924 64.8861 148.525 cv
65.1981 149.125 65.6541 149.424 66.2661 149.424 cv
66.8781 149.424 67.3341 149.125 67.6461 148.525 cv
67.9461 147.924 68.1021 147.025 68.1021 145.824 cv
68.1021 144.625 67.9461 143.724 67.6461 143.125 cv
67.3341 142.525 66.8781 142.224 66.2661 142.224 cv
66.2661 141.289 mo
67.2381 141.289 67.9821 141.685 68.5101 142.453 cv
69.0261 143.233 69.2901 144.361 69.2901 145.824 cv
69.2901 147.301 69.0261 148.428 68.5101 149.197 cv
67.9821 149.965 67.2381 150.349 66.2661 150.349 cv
65.2821 150.349 64.5261 149.965 64.0101 149.197 cv
63.4941 148.428 63.2421 147.301 63.2421 145.824 cv
63.2421 144.361 63.4941 143.233 64.0101 142.453 cv
64.5261 141.685 65.2821 141.289 66.2661 141.289 cv
ef
72 112.32 mo
76 112.32 li
f
72 112.32 mo
76 112.32 li
@
518.4 112.32 mo
514.4 112.32 li
f
518.4 112.32 mo
514.4 112.32 li
@
41.0349 114.637 mo
42.9669 114.637 li
42.9669 107.965 li
40.8669 108.384 li
40.8669 107.305 li
42.9549 106.884 li
44.1429 106.884 li
44.1429 114.637 li
46.0749 114.637 li
46.0749 115.633 li
41.0349 115.633 li
41.0349 114.637 li
ef
51.7173 107.917 mo
48.7293 112.585 li
51.7173 112.585 li
51.7173 107.917 li
51.4053 106.884 mo
52.8933 106.884 li
52.8933 112.585 li
54.1413 112.585 li
54.1413 113.569 li
52.8933 113.569 li
52.8933 115.633 li
51.7173 115.633 li
51.7173 113.569 li
47.7693 113.569 li
47.7693 112.428 li
51.4053 106.884 li
ef
58.6317 107.664 mo
58.0197 107.664 57.5637 107.965 57.2517 108.565 cv
56.9397 109.164 56.7957 110.065 56.7957 111.264 cv
56.7957 112.465 56.9397 113.365 57.2517 113.965 cv
57.5637 114.565 58.0197 114.865 58.6317 114.865 cv
59.2437 114.865 59.6997 114.565 60.0117 113.965 cv
60.3117 113.365 60.4677 112.465 60.4677 111.264 cv
60.4677 110.065 60.3117 109.164 60.0117 108.565 cv
59.6997 107.965 59.2437 107.664 58.6317 107.664 cv
58.6317 106.728 mo
59.6037 106.728 60.3477 107.125 60.8757 107.892 cv
61.3917 108.672 61.6557 109.801 61.6557 111.264 cv
61.6557 112.741 61.3917 113.868 60.8757 114.637 cv
60.3477 115.405 59.6037 115.789 58.6317 115.789 cv
57.6477 115.789 56.8917 115.405 56.3757 114.637 cv
55.8597 113.868 55.6077 112.741 55.6077 111.264 cv
55.6077 109.801 55.8597 108.672 56.3757 107.892 cv
56.8917 107.125 57.6477 106.728 58.6317 106.728 cv
ef
66.2661 107.664 mo
65.6541 107.664 65.1981 107.965 64.8861 108.565 cv
64.5741 109.164 64.4301 110.065 64.4301 111.264 cv
64.4301 112.465 64.5741 113.365 64.8861 113.965 cv
65.1981 114.565 65.6541 114.865 66.2661 114.865 cv
66.8781 114.865 67.3341 114.565 67.6461 113.965 cv
67.9461 113.365 68.1021 112.465 68.1021 111.264 cv
68.1021 110.065 67.9461 109.164 67.6461 108.565 cv
67.3341 107.965 66.8781 107.664 66.2661 107.664 cv
66.2661 106.728 mo
67.2381 106.728 67.9821 107.125 68.5101 107.892 cv
69.0261 108.672 69.2901 109.801 69.2901 111.264 cv
69.2901 112.741 69.0261 113.868 68.5101 114.637 cv
67.9821 115.405 67.2381 115.789 66.2661 115.789 cv
65.2821 115.789 64.5261 115.405 64.0101 114.637 cv
63.4941 113.868 63.2421 112.741 63.2421 111.264 cv
63.2421 109.801 63.4941 108.672 64.0101 107.892 cv
64.5261 107.125 65.2821 106.728 66.2661 106.728 cv
ef
72 77.76 mo
76 77.76 li
f
72 77.76 mo
76 77.76 li
@
518.4 77.76 mo
514.4 77.76 li
f
518.4 77.76 mo
514.4 77.76 li
@
41.0349 80.0765 mo
42.9669 80.0765 li
42.9669 73.4045 li
40.8669 73.8245 li
40.8669 72.7445 li
42.9549 72.3245 li
44.1429 72.3245 li
44.1429 80.0765 li
46.0749 80.0765 li
46.0749 81.0725 li
41.0349 81.0725 li
41.0349 80.0765 li
ef
51.1413 76.2245 mo
50.6133 76.2245 50.1933 76.4165 49.8813 76.7765 cv
49.5693 77.1365 49.4133 77.6405 49.4133 78.2645 cv
49.4133 78.9005 49.5693 79.4045 49.8813 79.7645 cv
50.1933 80.1245 50.6133 80.3045 51.1413 80.3045 cv
51.6693 80.3045 52.0893 80.1245 52.4013 79.7645 cv
52.7133 79.4045 52.8693 78.9005 52.8693 78.2645 cv
52.8693 77.6405 52.7133 77.1365 52.4013 76.7765 cv
52.0893 76.4165 51.6693 76.2245 51.1413 76.2245 cv
53.4933 72.5165 mo
53.4933 73.5965 li
53.1933 73.4525 52.8933 73.3445 52.5933 73.2725 cv
52.2813 73.2005 51.9813 73.1645 51.6933 73.1645 cv
50.9013 73.1645 50.3013 73.4285 49.8933 73.9565 cv
49.4853 74.4845 49.2453 75.2885 49.1973 76.3445 cv
49.4253 76.0085 49.7133 75.7445 50.0613 75.5645 cv
50.4093 75.3845 50.7933 75.2885 51.2133 75.2885 cv
52.0893 75.2885 52.7853 75.5645 53.2893 76.0925 cv
53.7933 76.6205 54.0573 77.3525 54.0573 78.2645 cv
54.0573 79.1645 53.7813 79.8845 53.2533 80.4245 cv
52.7253 80.9645 52.0173 81.2285 51.1413 81.2285 cv
50.1333 81.2285 49.3533 80.8445 48.8253 80.0765 cv
48.2853 79.3085 48.0213 78.1805 48.0213 76.7045 cv
48.0213 75.3245 48.3453 74.2205 49.0053 73.4045 cv
49.6533 72.5885 50.5413 72.1685 51.6453 72.1685 cv
51.9333 72.1685 52.2333 72.2045 52.5453 72.2525 cv
52.8453 72.3125 53.1573 72.3965 53.4933 72.5165 cv
ef
58.6317 73.1045 mo
58.0197 73.1045 57.5637 73.4045 57.2517 74.0045 cv
56.9397 74.6045 56.7957 75.5045 56.7957 76.7045 cv
56.7957 77.9045 56.9397 78.8045 57.2517 79.4045 cv
57.5637 80.0045 58.0197 80.3045 58.6317 80.3045 cv
59.2437 80.3045 59.6997 80.0045 60.0117 79.4045 cv
60.3117 78.8045 60.4677 77.9045 60.4677 76.7045 cv
60.4677 75.5045 60.3117 74.6045 60.0117 74.0045 cv
59.6997 73.4045 59.2437 73.1045 58.6317 73.1045 cv
58.6317 72.1685 mo
59.6037 72.1685 60.3477 72.5645 60.8757 73.3325 cv
61.3917 74.1125 61.6557 75.2405 61.6557 76.7045 cv
61.6557 78.1805 61.3917 79.3085 60.8757 80.0765 cv
60.3477 80.8445 59.6037 81.2285 58.6317 81.2285 cv
57.6477 81.2285 56.8917 80.8445 56.3757 80.0765 cv
55.8597 79.3085 55.6077 78.1805 55.6077 76.7045 cv
55.6077 75.2405 55.8597 74.1125 56.3757 73.3325 cv
56.8917 72.5645 57.6477 72.1685 58.6317 72.1685 cv
ef
66.2661 73.1045 mo
65.6541 73.1045 65.1981 73.4045 64.8861 74.0045 cv
64.5741 74.6045 64.4301 75.5045 64.4301 76.7045 cv
64.4301 77.9045 64.5741 78.8045 64.8861 79.4045 cv
65.1981 80.0045 65.6541 80.3045 66.2661 80.3045 cv
66.8781 80.3045 67.3341 80.0045 67.6461 79.4045 cv
67.9461 78.8045 68.1021 77.9045 68.1021 76.7045 cv
68.1021 75.5045 67.9461 74.6045 67.6461 74.0045 cv
67.3341 73.4045 66.8781 73.1045 66.2661 73.1045 cv
66.2661 72.1685 mo
67.2381 72.1685 67.9821 72.5645 68.5101 73.3325 cv
69.0261 74.1125 69.2901 75.2405 69.2901 76.7045 cv
69.2901 78.1805 69.0261 79.3085 68.5101 80.0765 cv
67.9821 80.8445 67.2381 81.2285 66.2661 81.2285 cv
65.2821 81.2285 64.5261 80.8445 64.0101 80.0765 cv
63.4941 79.3085 63.2421 78.1805 63.2421 76.7045 cv
63.2421 75.2405 63.4941 74.1125 64.0101 73.3325 cv
64.5261 72.5645 65.2821 72.1685 66.2661 72.1685 cv
ef
72 43.2 mo
76 43.2 li
f
72 43.2 mo
76 43.2 li
@
518.4 43.2 mo
514.4 43.2 li
f
518.4 43.2 mo
514.4 43.2 li
@
41.0349 45.5165 mo
42.9669 45.5165 li
42.9669 38.8445 li
40.8669 39.2645 li
40.8669 38.1845 li
42.9549 37.7645 li
44.1429 37.7645 li
44.1429 45.5165 li
46.0749 45.5165 li
46.0749 46.5125 li
41.0349 46.5125 li
41.0349 45.5165 li
ef
50.9973 42.3605 mo
50.4333 42.3605 49.9893 42.5165 49.6653 42.8165 cv
49.3413 43.1165 49.1853 43.5245 49.1853 44.0525 cv
49.1853 44.5805 49.3413 45.0005 49.6653 45.3005 cv
49.9893 45.6005 50.4333 45.7445 50.9973 45.7445 cv
51.5493 45.7445 51.9933 45.6005 52.3173 45.2885 cv
52.6413 44.9885 52.8093 44.5805 52.8093 44.0525 cv
52.8093 43.5245 52.6413 43.1165 52.3293 42.8165 cv
52.0053 42.5165 51.5613 42.3605 50.9973 42.3605 cv
49.8093 41.8565 mo
49.3053 41.7365 48.9093 41.4965 48.6213 41.1485 cv
48.3333 40.8005 48.2013 40.3805 48.2013 39.8765 cv
48.2013 39.1805 48.4413 38.6285 48.9453 38.2205 cv
49.4373 37.8125 50.1213 37.6085 50.9973 37.6085 cv
51.8613 37.6085 52.5453 37.8125 53.0493 38.2205 cv
53.5413 38.6285 53.7933 39.1805 53.7933 39.8765 cv
53.7933 40.3805 53.6493 40.8005 53.3613 41.1485 cv
53.0733 41.4965 52.6893 41.7365 52.1853 41.8565 cv
52.7493 41.9885 53.1933 42.2525 53.5173 42.6365 cv
53.8293 43.0205 53.9973 43.5005 53.9973 44.0525 cv
53.9973 44.9045 53.7333 45.5525 53.2173 45.9965 cv
52.6893 46.4525 51.9573 46.6685 50.9973 46.6685 cv
50.0253 46.6685 49.2813 46.4525 48.7653 45.9965 cv
48.2493 45.5525 47.9973 44.9045 47.9973 44.0525 cv
47.9973 43.5005 48.1533 43.0205 48.4773 42.6365 cv
48.7893 42.2525 49.2333 41.9885 49.8093 41.8565 cv
49.3773 39.9845 mo
49.3773 40.4405 49.5093 40.8005 49.7973 41.0525 cv
50.0853 41.3045 50.4813 41.4245 50.9973 41.4245 cv
51.5013 41.4245 51.8973 41.3045 52.1853 41.0525 cv
52.4733 40.8005 52.6173 40.4405 52.6173 39.9845 cv
52.6173 39.5285 52.4733 39.1805 52.1853 38.9285 cv
51.8973 38.6765 51.5013 38.5445 50.9973 38.5445 cv
50.4813 38.5445 50.0853 38.6765 49.7973 38.9285 cv
49.5093 39.1805 49.3773 39.5285 49.3773 39.9845 cv
ef
58.6317 38.5445 mo
58.0197 38.5445 57.5637 38.8445 57.2517 39.4445 cv
56.9397 40.0445 56.7957 40.9445 56.7957 42.1445 cv
56.7957 43.3445 56.9397 44.2445 57.2517 44.8445 cv
57.5637 45.4445 58.0197 45.7445 58.6317 45.7445 cv
59.2437 45.7445 59.6997 45.4445 60.0117 44.8445 cv
60.3117 44.2445 60.4677 43.3445 60.4677 42.1445 cv
60.4677 40.9445 60.3117 40.0445 60.0117 39.4445 cv
59.6997 38.8445 59.2437 38.5445 58.6317 38.5445 cv
58.6317 37.6085 mo
59.6037 37.6085 60.3477 38.0045 60.8757 38.7725 cv
61.3917 39.5525 61.6557 40.6805 61.6557 42.1445 cv
61.6557 43.6205 61.3917 44.7485 60.8757 45.5165 cv
60.3477 46.2845 59.6037 46.6685 58.6317 46.6685 cv
57.6477 46.6685 56.8917 46.2845 56.3757 45.5165 cv
55.8597 44.7485 55.6077 43.6205 55.6077 42.1445 cv
55.6077 40.6805 55.8597 39.5525 56.3757 38.7725 cv
56.8917 38.0045 57.6477 37.6085 58.6317 37.6085 cv
ef
66.2661 38.5445 mo
65.6541 38.5445 65.1981 38.8445 64.8861 39.4445 cv
64.5741 40.0445 64.4301 40.9445 64.4301 42.1445 cv
64.4301 43.3445 64.5741 44.2445 64.8861 44.8445 cv
65.1981 45.4445 65.6541 45.7445 66.2661 45.7445 cv
66.8781 45.7445 67.3341 45.4445 67.6461 44.8445 cv
67.9461 44.2445 68.1021 43.3445 68.1021 42.1445 cv
68.1021 40.9445 67.9461 40.0445 67.6461 39.4445 cv
67.3341 38.8445 66.8781 38.5445 66.2661 38.5445 cv
66.2661 37.6085 mo
67.2381 37.6085 67.9821 38.0045 68.5101 38.7725 cv
69.0261 39.5525 69.2901 40.6805 69.2901 42.1445 cv
69.2901 43.6205 69.0261 44.7485 68.5101 45.5165 cv
67.9821 46.2845 67.2381 46.6685 66.2661 46.6685 cv
65.2821 46.6685 64.5261 46.2845 64.0101 45.5165 cv
63.4941 44.7485 63.2421 43.6205 63.2421 42.1445 cv
63.2421 40.6805 63.4941 39.5525 64.0101 38.7725 cv
64.5261 38.0045 65.2821 37.6085 66.2661 37.6085 cv
ef
23.2989 220.736 mo
23.2989 213.344 li
24.2949 213.344 li
24.2949 216.452 li
32.0469 216.452 li
32.0469 217.64 li
24.2949 217.64 li
24.2949 220.736 li
23.2989 220.736 li
ef
25.4829 212.629 mo
25.4829 211.549 li
32.0469 211.549 li
32.0469 212.629 li
cp
22.9269 212.629 mo
22.9269 211.549 li
24.2949 211.549 li
24.2949 212.629 li
cp
ef
26.7429 204.183 mo
26.2629 203.919 25.9149 203.595 25.6749 203.223 cv
25.4469 202.851 25.3269 202.407 25.3269 201.891 cv
25.3269 201.219 25.5669 200.691 26.0469 200.319 cv
26.5269 199.947 27.2109 199.755 28.0869 199.755 cv
32.0469 199.755 li
32.0469 200.835 li
28.1229 200.835 li
27.4989 200.835 27.0309 200.955 26.7189 201.171 cv
26.4189 201.399 26.2629 201.735 26.2629 202.191 cv
26.2629 202.755 26.4549 203.199 26.8269 203.523 cv
27.1989 203.847 27.7029 204.003 28.3389 204.003 cv
32.0469 204.003 li
32.0469 205.083 li
28.1229 205.083 li
27.4989 205.083 27.0309 205.203 26.7189 205.419 cv
26.4189 205.647 26.2629 205.995 26.2629 206.451 cv
26.2629 207.003 26.4549 207.447 26.8269 207.771 cv
27.1989 208.095 27.7029 208.251 28.3389 208.251 cv
32.0469 208.251 li
32.0469 209.331 li
25.4829 209.331 li
25.4829 208.251 li
26.5029 208.251 li
26.1069 208.011 25.8069 207.711 25.6149 207.363 cv
25.4229 207.027 25.3269 206.619 25.3269 206.139 cv
25.3269 205.659 25.4469 205.263 25.6869 204.927 cv
25.9269 204.591 26.2869 204.351 26.7429 204.183 cv
ef
28.4949 191.99 mo
29.0229 191.99 li
29.0229 196.946 li
29.7669 196.898 30.3429 196.682 30.7269 196.274 cv
31.1109 195.878 31.3029 195.326 31.3029 194.606 cv
31.3029 194.198 31.2549 193.79 31.1589 193.406 cv
31.0629 193.022 30.9069 192.626 30.6909 192.242 cv
31.7109 192.242 li
31.8789 192.626 32.0109 193.022 32.0829 193.43 cv
32.1549 193.838 32.2029 194.258 32.2029 194.666 cv
32.2029 195.722 31.9029 196.55 31.3029 197.162 cv
30.7029 197.774 29.8749 198.074 28.8309 198.074 cv
27.7629 198.074 26.9109 197.786 26.2749 197.21 cv
25.6509 196.634 25.3269 195.842 25.3269 194.858 cv
25.3269 193.97 25.6149 193.274 26.1789 192.758 cv
26.7549 192.254 27.5229 191.99 28.4949 191.99 cv
28.1829 193.07 mo
27.5949 193.082 27.1269 193.25 26.7669 193.562 cv
26.4189 193.886 26.2389 194.318 26.2389 194.846 cv
26.2389 195.446 26.4189 195.926 26.7549 196.286 cv
27.0909 196.646 27.5709 196.862 28.1829 196.91 cv
28.1829 193.07 li
ef
22.9389 187.633 mo
23.8509 188.161 24.7389 188.545 25.6149 188.797 cv
26.4909 189.061 27.3789 189.181 28.2789 189.181 cv
29.1909 189.181 30.0789 189.061 30.9549 188.797 cv
31.8429 188.545 32.7189 188.161 33.6189 187.633 cv
33.6189 188.569 li
32.6949 189.157 31.8069 189.601 30.9189 189.889 cv
30.0309 190.177 29.1549 190.321 28.2789 190.321 cv
27.4149 190.321 26.5389 190.177 25.6509 189.889 cv
24.7629 189.601 23.8629 189.169 22.9389 188.569 cv
22.9389 187.633 li
ef
25.6749 181.356 mo
26.6949 181.356 li
26.5509 181.668 26.4309 181.98 26.3469 182.304 cv
26.2749 182.64 26.2269 182.976 26.2269 183.324 cv
26.2269 183.864 26.3109 184.272 26.4789 184.536 cv
26.6469 184.8 26.8869 184.932 27.2109 184.932 cv
27.4629 184.932 27.6549 184.836 27.7989 184.644 cv
27.9429 184.452 28.0869 184.068 28.2069 183.492 cv
28.2909 183.12 li
28.4589 182.352 28.6989 181.812 28.9869 181.488 cv
29.2869 181.176 29.7069 181.008 30.2349 181.008 cv
30.8469 181.008 31.3269 181.248 31.6749 181.728 cv
32.0349 182.208 32.2029 182.88 32.2029 183.72 cv
32.2029 184.08 32.1669 184.44 32.1069 184.824 cv
32.0469 185.208 31.9509 185.604 31.8069 186.024 cv
30.6909 186.024 li
30.9069 185.628 31.0629 185.232 31.1589 184.848 cv
31.2669 184.464 31.3149 184.08 31.3149 183.696 cv
31.3149 183.192 31.2309 182.796 31.0629 182.52 cv
30.8949 182.256 30.6429 182.112 30.3189 182.112 cv
30.0309 182.112 29.8029 182.22 29.6469 182.412 cv
29.4909 182.604 29.3349 183.036 29.1909 183.708 cv
29.1069 184.08 li
28.9629 184.752 28.7469 185.244 28.4589 185.532 cv
28.1709 185.832 27.7749 185.976 27.2589 185.976 cv
26.6469 185.976 26.1669 185.76 25.8309 185.328 cv
25.4949 184.896 25.3269 184.272 25.3269 183.456 cv
25.3269 183.06 25.3629 182.688 25.4229 182.328 cv
25.4829 181.98 25.5669 181.656 25.6749 181.356 cv
ef
22.9389 179.459 mo
22.9389 178.523 li
23.8629 177.947 24.7629 177.503 25.6509 177.215 cv
26.5389 176.927 27.4149 176.771 28.2789 176.771 cv
29.1549 176.771 30.0309 176.927 30.9189 177.215 cv
31.8069 177.503 32.6949 177.947 33.6189 178.523 cv
33.6189 179.459 li
32.7189 178.943 31.8429 178.559 30.9549 178.295 cv
30.0789 178.043 29.1909 177.911 28.2789 177.911 cv
27.3789 177.911 26.4909 178.043 25.6149 178.295 cv
24.7389 178.559 23.8509 178.943 22.9389 179.459 cv
ef
1 lw
72 43.2 mo
518.4 43.2 li
518.4 354.24 mo
518.4 43.2 li
72 354.24 mo
518.4 354.24 li
72 354.24 mo
72 43.2 li
@
92.6911 327.61 mo
90.3151 330.802 li
92.8111 334.174 li
91.5391 334.174 li
89.6311 331.594 li
87.7231 334.174 li
86.4511 334.174 li
88.9951 330.742 li
86.6671 327.61 li
87.9391 327.61 li
89.6791 329.95 li
91.4191 327.61 li
92.6911 327.61 li
ef
98.8111 327.862 mo
98.8111 328.87 li
98.4991 328.702 98.1991 328.582 97.8871 328.498 cv
97.5751 328.414 97.2751 328.366 96.9631 328.366 cv
96.2671 328.366 95.7151 328.594 95.3311 329.038 cv
94.9471 329.482 94.7551 330.106 94.7551 330.898 cv
94.7551 331.702 94.9471 332.326 95.3311 332.77 cv
95.7151 333.214 96.2671 333.43 96.9631 333.43 cv
97.2751 333.43 97.5751 333.394 97.8871 333.31 cv
98.1991 333.226 98.4991 333.094 98.8111 332.926 cv
98.8111 333.922 li
98.4991 334.066 98.1871 334.174 97.8751 334.234 cv
97.5511 334.294 97.2031 334.33 96.8431 334.33 cv
95.8591 334.33 95.0671 334.03 94.4911 333.406 cv
93.9031 332.794 93.6151 331.954 93.6151 330.898 cv
93.6151 329.83 93.9031 328.99 94.4911 328.378 cv
95.0791 327.766 95.8831 327.454 96.9151 327.454 cv
97.2511 327.454 97.5751 327.49 97.8871 327.562 cv
98.1991 327.634 98.5111 327.73 98.8111 327.862 cv
ef
104.089 326.458 mo
101.101 331.126 li
104.089 331.126 li
104.089 326.458 li
103.777 325.426 mo
105.265 325.426 li
105.265 331.126 li
106.513 331.126 li
106.513 332.11 li
105.265 332.11 li
105.265 334.174 li
104.089 334.174 li
104.089 332.11 li
100.141 332.11 li
100.141 330.97 li
103.777 325.426 li
ef
111.003 326.206 mo
110.391 326.206 109.935 326.506 109.623 327.106 cv
109.311 327.706 109.167 328.606 109.167 329.806 cv
109.167 331.006 109.311 331.906 109.623 332.506 cv
109.935 333.106 110.391 333.406 111.003 333.406 cv
111.615 333.406 112.071 333.106 112.383 332.506 cv
112.683 331.906 112.839 331.006 112.839 329.806 cv
112.839 328.606 112.683 327.706 112.383 327.106 cv
112.071 326.506 111.615 326.206 111.003 326.206 cv
111.003 325.27 mo
111.975 325.27 112.719 325.666 113.247 326.434 cv
113.763 327.214 114.027 328.342 114.027 329.806 cv
114.027 331.282 113.763 332.41 113.247 333.178 cv
112.719 333.946 111.975 334.33 111.003 334.33 cv
110.019 334.33 109.263 333.946 108.747 333.178 cv
108.231 332.41 107.979 331.282 107.979 329.806 cv
107.979 328.342 108.231 327.214 108.747 326.434 cv
109.263 325.666 110.019 325.27 111.003 325.27 cv
ef
371.691 105.934 mo
369.315 109.126 li
371.811 112.498 li
370.539 112.498 li
368.631 109.918 li
366.723 112.498 li
365.451 112.498 li
367.995 109.066 li
365.667 105.934 li
366.939 105.934 li
368.679 108.274 li
370.419 105.934 li
371.691 105.934 li
ef
377.811 106.186 mo
377.811 107.194 li
377.499 107.026 377.199 106.906 376.887 106.822 cv
376.575 106.738 376.275 106.69 375.963 106.69 cv
375.267 106.69 374.715 106.918 374.331 107.362 cv
373.947 107.806 373.755 108.43 373.755 109.222 cv
373.755 110.026 373.947 110.65 374.331 111.094 cv
374.715 111.538 375.267 111.754 375.963 111.754 cv
376.275 111.754 376.575 111.718 376.887 111.634 cv
377.199 111.55 377.499 111.418 377.811 111.25 cv
377.811 112.246 li
377.499 112.39 377.187 112.498 376.875 112.558 cv
376.551 112.618 376.203 112.654 375.843 112.654 cv
374.859 112.654 374.067 112.354 373.491 111.73 cv
372.903 111.118 372.615 110.278 372.615 109.222 cv
372.615 108.154 372.903 107.314 373.491 106.702 cv
374.079 106.09 374.883 105.778 375.915 105.778 cv
376.251 105.778 376.575 105.814 376.887 105.886 cv
377.199 105.958 377.511 106.054 377.811 106.186 cv
ef
383.089 104.782 mo
380.101 109.45 li
383.089 109.45 li
383.089 104.782 li
382.777 103.75 mo
384.265 103.75 li
384.265 109.45 li
385.513 109.45 li
385.513 110.434 li
384.265 110.434 li
384.265 112.498 li
383.089 112.498 li
383.089 110.434 li
379.141 110.434 li
379.141 109.294 li
382.777 103.75 li
ef
390.003 104.53 mo
389.391 104.53 388.935 104.83 388.623 105.43 cv
388.311 106.03 388.167 106.93 388.167 108.13 cv
388.167 109.33 388.311 110.23 388.623 110.83 cv
388.935 111.43 389.391 111.73 390.003 111.73 cv
390.615 111.73 391.071 111.43 391.383 110.83 cv
391.683 110.23 391.839 109.33 391.839 108.13 cv
391.839 106.93 391.683 106.03 391.383 105.43 cv
391.071 104.83 390.615 104.53 390.003 104.53 cv
390.003 103.594 mo
390.975 103.594 391.719 103.99 392.247 104.758 cv
392.763 105.538 393.027 106.666 393.027 108.13 cv
393.027 109.606 392.763 110.734 392.247 111.502 cv
391.719 112.27 390.975 112.654 390.003 112.654 cv
389.019 112.654 388.263 112.27 387.747 111.502 cv
387.231 110.734 386.979 109.606 386.979 108.13 cv
386.979 106.666 387.231 105.538 387.747 104.758 cv
388.263 103.99 389.019 103.594 390.003 103.594 cv
ef
134.891 325.125 mo
140.423 325.125 li
140.423 326.121 li
136.079 326.121 li
136.079 328.713 li
140.243 328.713 li
140.243 329.709 li
136.079 329.709 li
136.079 332.877 li
140.531 332.877 li
140.531 333.873 li
134.891 333.873 li
134.891 325.125 li
ef
142.055 325.125 mo
143.327 325.125 li
145.499 328.377 li
147.684 325.125 li
148.956 325.125 li
146.148 329.325 li
149.148 333.873 li
147.876 333.873 li
145.415 330.153 li
142.932 333.873 li
141.66 333.873 li
144.779 329.205 li
142.055 325.125 li
ef
151.883 326.097 mo
151.883 329.385 li
153.372 329.385 li
153.923 329.385 154.344 329.253 154.643 328.965 cv
154.943 328.677 155.1 328.269 155.1 327.741 cv
155.1 327.213 154.943 326.817 154.643 326.529 cv
154.344 326.241 153.923 326.097 153.372 326.097 cv
151.883 326.097 li
150.695 325.125 mo
153.372 325.125 li
154.344 325.125 155.087 325.353 155.592 325.797 cv
156.096 326.241 156.348 326.889 156.348 327.741 cv
156.348 328.605 156.096 329.265 155.592 329.697 cv
155.087 330.141 154.344 330.357 153.372 330.357 cv
151.883 330.357 li
151.883 333.873 li
150.695 333.873 li
150.695 325.125 li
ef
156.648 335.853 mo
162.876 335.853 li
162.876 336.693 li
156.648 336.693 li
cp
f
170.484 325.797 mo
170.484 327.045 li
170.076 326.685 169.656 326.409 169.199 326.217 cv
168.743 326.037 168.275 325.941 167.771 325.941 cv
166.764 325.941 165.995 326.253 165.467 326.865 cv
164.939 327.477 164.676 328.353 164.676 329.505 cv
164.676 330.657 164.939 331.545 165.467 332.157 cv
165.995 332.769 166.764 333.069 167.771 333.069 cv
168.275 333.069 168.743 332.985 169.199 332.793 cv
169.656 332.613 170.076 332.337 170.484 331.965 cv
170.484 333.201 li
170.064 333.489 169.62 333.693 169.163 333.825 cv
168.708 333.957 168.215 334.029 167.699 334.029 cv
166.38 334.029 165.335 333.633 164.568 332.829 cv
163.799 332.025 163.428 330.921 163.428 329.505 cv
163.428 328.101 163.799 326.997 164.568 326.181 cv
165.335 325.377 166.38 324.969 167.699 324.969 cv
168.227 324.969 168.719 325.041 169.176 325.173 cv
169.632 325.317 170.076 325.521 170.484 325.797 cv
ef
178.859 325.797 mo
178.859 327.045 li
178.452 326.685 178.031 326.409 177.576 326.217 cv
177.12 326.037 176.652 325.941 176.148 325.941 cv
175.139 325.941 174.372 326.253 173.844 326.865 cv
173.316 327.477 173.051 328.353 173.051 329.505 cv
173.051 330.657 173.316 331.545 173.844 332.157 cv
174.372 332.769 175.139 333.069 176.148 333.069 cv
176.652 333.069 177.12 332.985 177.576 332.793 cv
178.031 332.613 178.452 332.337 178.859 331.965 cv
178.859 333.201 li
178.439 333.489 177.995 333.693 177.54 333.825 cv
177.083 333.957 176.592 334.029 176.076 334.029 cv
174.755 334.029 173.712 333.633 172.943 332.829 cv
172.176 332.025 171.803 330.921 171.803 329.505 cv
171.803 328.101 172.176 326.997 172.943 326.181 cv
173.712 325.377 174.755 324.969 176.076 324.969 cv
176.604 324.969 177.096 325.041 177.551 325.173 cv
178.008 325.317 178.452 325.521 178.859 325.797 cv
ef
413.892 126.063 mo
419.423 126.063 li
419.423 127.059 li
415.079 127.059 li
415.079 129.651 li
419.243 129.651 li
419.243 130.647 li
415.079 130.647 li
415.079 133.815 li
419.531 133.815 li
419.531 134.811 li
413.892 134.811 li
413.892 126.063 li
ef
421.056 126.063 mo
422.328 126.063 li
424.5 129.315 li
426.684 126.063 li
427.956 126.063 li
425.147 130.263 li
428.147 134.811 li
426.875 134.811 li
424.415 131.091 li
421.931 134.811 li
420.659 134.811 li
423.78 130.143 li
421.056 126.063 li
ef
430.884 127.035 mo
430.884 130.323 li
432.371 130.323 li
432.923 130.323 433.344 130.191 433.643 129.903 cv
433.944 129.615 434.099 129.207 434.099 128.679 cv
434.099 128.151 433.944 127.755 433.643 127.467 cv
433.344 127.179 432.923 127.035 432.371 127.035 cv
430.884 127.035 li
429.695 126.063 mo
432.371 126.063 li
433.344 126.063 434.087 126.291 434.591 126.735 cv
435.095 127.179 435.348 127.827 435.348 128.679 cv
435.348 129.543 435.095 130.203 434.591 130.635 cv
434.087 131.079 433.344 131.295 432.371 131.295 cv
430.884 131.295 li
430.884 134.811 li
429.695 134.811 li
429.695 126.063 li
ef
435.647 136.791 mo
441.875 136.791 li
441.875 137.631 li
435.647 137.631 li
cp
f
449.483 126.735 mo
449.483 127.983 li
449.076 127.623 448.655 127.347 448.199 127.155 cv
447.743 126.975 447.276 126.879 446.772 126.879 cv
445.763 126.879 444.996 127.191 444.467 127.803 cv
443.94 128.415 443.676 129.291 443.676 130.443 cv
443.676 131.595 443.94 132.483 444.467 133.095 cv
444.996 133.707 445.763 134.007 446.772 134.007 cv
447.276 134.007 447.743 133.923 448.199 133.731 cv
448.655 133.551 449.076 133.275 449.483 132.903 cv
449.483 134.139 li
449.064 134.427 448.62 134.631 448.164 134.763 cv
447.707 134.895 447.216 134.967 446.699 134.967 cv
445.379 134.967 444.336 134.571 443.568 133.767 cv
442.799 132.963 442.427 131.859 442.427 130.443 cv
442.427 129.039 442.799 127.935 443.568 127.119 cv
444.336 126.315 445.379 125.907 446.699 125.907 cv
447.228 125.907 447.72 125.979 448.176 126.111 cv
448.632 126.255 449.076 126.459 449.483 126.735 cv
ef
457.859 126.735 mo
457.859 127.983 li
457.452 127.623 457.031 127.347 456.576 127.155 cv
456.12 126.975 455.651 126.879 455.147 126.879 cv
454.139 126.879 453.371 127.191 452.844 127.803 cv
452.315 128.415 452.052 129.291 452.052 130.443 cv
452.052 131.595 452.315 132.483 452.844 133.095 cv
453.371 133.707 454.139 134.007 455.147 134.007 cv
455.651 134.007 456.12 133.923 456.576 133.731 cv
457.031 133.551 457.452 133.275 457.859 132.903 cv
457.859 134.139 li
457.44 134.427 456.996 134.631 456.539 134.763 cv
456.083 134.895 455.591 134.967 455.076 134.967 cv
453.755 134.967 452.711 134.571 451.944 133.767 cv
451.176 132.963 450.803 131.859 450.803 130.443 cv
450.803 129.039 451.176 127.935 451.944 127.119 cv
452.711 126.315 453.755 125.907 455.076 125.907 cv
455.603 125.907 456.095 125.979 456.552 126.111 cv
457.008 126.255 457.452 126.459 457.859 126.735 cv
ef
208.361 328.626 mo
208.361 329.154 li
203.406 329.154 li
203.454 329.898 203.669 330.474 204.077 330.858 cv
204.473 331.242 205.025 331.434 205.745 331.434 cv
206.154 331.434 206.561 331.386 206.945 331.29 cv
207.329 331.194 207.725 331.038 208.109 330.822 cv
208.109 331.842 li
207.725 332.01 207.329 332.142 206.921 332.214 cv
206.514 332.286 206.094 332.334 205.686 332.334 cv
204.63 332.334 203.801 332.034 203.189 331.434 cv
202.577 330.834 202.277 330.006 202.277 328.962 cv
202.277 327.894 202.566 327.042 203.141 326.406 cv
203.717 325.782 204.51 325.458 205.493 325.458 cv
206.382 325.458 207.077 325.746 207.594 326.31 cv
208.098 326.886 208.361 327.654 208.361 328.626 cv
207.281 328.314 mo
207.27 327.726 207.102 327.258 206.79 326.898 cv
206.465 326.55 206.033 326.37 205.505 326.37 cv
204.906 326.37 204.426 326.55 204.066 326.886 cv
203.706 327.222 203.49 327.702 203.441 328.314 cv
207.281 328.314 li
ef
214.854 325.866 mo
214.854 326.874 li
214.542 326.706 214.242 326.586 213.93 326.502 cv
213.617 326.418 213.318 326.37 213.005 326.37 cv
212.309 326.37 211.758 326.598 211.374 327.042 cv
210.99 327.486 210.798 328.11 210.798 328.902 cv
210.798 329.706 210.99 330.33 211.374 330.774 cv
211.758 331.218 212.309 331.434 213.005 331.434 cv
213.318 331.434 213.617 331.398 213.93 331.314 cv
214.242 331.23 214.542 331.098 214.854 330.93 cv
214.854 331.926 li
214.542 332.07 214.23 332.178 213.917 332.238 cv
213.594 332.298 213.245 332.334 212.885 332.334 cv
211.902 332.334 211.109 332.034 210.533 331.41 cv
209.945 330.798 209.658 329.958 209.658 328.902 cv
209.658 327.834 209.945 326.994 210.533 326.382 cv
211.122 325.77 211.926 325.458 212.958 325.458 cv
213.294 325.458 213.617 325.494 213.93 325.566 cv
214.242 325.638 214.553 325.734 214.854 325.866 cv
ef
217.902 331.182 mo
222.029 331.182 li
222.029 332.178 li
216.473 332.178 li
216.473 331.182 li
216.917 330.726 217.529 330.102 218.309 329.31 cv
219.077 328.53 219.57 328.026 219.773 327.798 cv
220.158 327.378 220.421 327.018 220.566 326.718 cv
220.71 326.43 220.794 326.13 220.794 325.842 cv
220.794 325.386 220.626 325.002 220.301 324.714 cv
219.977 324.426 219.557 324.27 219.029 324.27 cv
218.658 324.27 218.262 324.342 217.854 324.462 cv
217.445 324.594 217.001 324.786 216.533 325.05 cv
216.533 323.85 li
217.014 323.658 217.458 323.514 217.865 323.418 cv
218.273 323.322 218.658 323.274 219.005 323.274 cv
219.906 323.274 220.626 323.502 221.165 323.958 cv
221.706 324.414 221.982 325.014 221.982 325.77 cv
221.982 326.13 221.91 326.478 221.777 326.79 cv
221.645 327.114 221.406 327.498 221.046 327.93 cv
220.949 328.05 220.637 328.374 220.109 328.914 cv
219.581 329.454 218.85 330.21 217.902 331.182 cv
ef
487.362 41.3246 mo
487.362 41.8526 li
482.405 41.8526 li
482.453 42.5966 482.669 43.1726 483.078 43.5566 cv
483.474 43.9406 484.026 44.1326 484.746 44.1326 cv
485.154 44.1326 485.561 44.0846 485.945 43.9886 cv
486.329 43.8926 486.725 43.7366 487.109 43.5206 cv
487.109 44.5406 li
486.725 44.7086 486.329 44.8406 485.922 44.9126 cv
485.513 44.9846 485.094 45.0326 484.685 45.0326 cv
483.629 45.0326 482.802 44.7326 482.19 44.1326 cv
481.578 43.5326 481.277 42.7046 481.277 41.6606 cv
481.277 40.5926 481.565 39.7406 482.142 39.1046 cv
482.717 38.4806 483.509 38.1566 484.493 38.1566 cv
485.382 38.1566 486.078 38.4446 486.594 39.0086 cv
487.098 39.5846 487.362 40.3526 487.362 41.3246 cv
486.281 41.0126 mo
486.27 40.4246 486.102 39.9566 485.789 39.5966 cv
485.466 39.2486 485.034 39.0686 484.505 39.0686 cv
483.905 39.0686 483.426 39.2486 483.065 39.5846 cv
482.706 39.9206 482.49 40.4006 482.441 41.0126 cv
486.281 41.0126 li
ef
493.853 38.5646 mo
493.853 39.5726 li
493.542 39.4046 493.241 39.2846 492.93 39.2006 cv
492.617 39.1166 492.318 39.0686 492.005 39.0686 cv
491.31 39.0686 490.758 39.2966 490.374 39.7406 cv
489.99 40.1846 489.797 40.8086 489.797 41.6006 cv
489.797 42.4046 489.99 43.0286 490.374 43.4726 cv
490.758 43.9166 491.31 44.1326 492.005 44.1326 cv
492.318 44.1326 492.617 44.0966 492.93 44.0126 cv
493.241 43.9286 493.542 43.7966 493.853 43.6286 cv
493.853 44.6246 li
493.542 44.7686 493.229 44.8766 492.918 44.9366 cv
492.594 44.9966 492.246 45.0326 491.885 45.0326 cv
490.901 45.0326 490.109 44.7326 489.534 44.1086 cv
488.945 43.4966 488.658 42.6566 488.658 41.6006 cv
488.658 40.5326 488.945 39.6926 489.534 39.0806 cv
490.121 38.4686 490.926 38.1566 491.957 38.1566 cv
492.293 38.1566 492.617 38.1926 492.93 38.2646 cv
493.241 38.3366 493.553 38.4326 493.853 38.5646 cv
ef
496.901 43.8806 mo
501.03 43.8806 li
501.03 44.8766 li
495.474 44.8766 li
495.474 43.8806 li
495.918 43.4246 496.53 42.8006 497.31 42.0086 cv
498.078 41.2286 498.569 40.7246 498.773 40.4966 cv
499.158 40.0766 499.422 39.7166 499.565 39.4166 cv
499.71 39.1286 499.793 38.8286 499.793 38.5406 cv
499.793 38.0846 499.625 37.7006 499.302 37.4126 cv
498.978 37.1246 498.557 36.9686 498.03 36.9686 cv
497.658 36.9686 497.262 37.0406 496.853 37.1606 cv
496.445 37.2926 496.001 37.4846 495.534 37.7486 cv
495.534 36.5486 li
496.013 36.3566 496.457 36.2126 496.866 36.1166 cv
497.273 36.0206 497.658 35.9726 498.005 35.9726 cv
498.905 35.9726 499.625 36.2006 500.165 36.6566 cv
500.706 37.1126 500.982 37.7126 500.982 38.4686 cv
500.982 38.8286 500.909 39.1766 500.777 39.4886 cv
500.646 39.8126 500.405 40.1966 500.046 40.6286 cv
499.949 40.7486 499.638 41.0726 499.109 41.6126 cv
498.582 42.1526 497.849 42.9086 496.901 43.8806 cv
ef
165.019 405.494 mo
429.381 405.494 li
430.448 405.494 430.981 404.961 430.981 403.894 cv
430.981 392.944 li
430.981 391.877 430.448 391.344 429.381 391.344 cv
165.019 391.344 li
163.952 391.344 163.419 391.877 163.419 392.944 cv
163.419 403.894 li
163.419 404.961 163.952 405.494 165.019 405.494 cv
cp
1 /0 /CSD get_res sepcs
.7 sep
f
165.019 405.494 mo
429.381 405.494 li
430.448 405.494 430.981 404.961 430.981 403.894 cv
430.981 392.944 li
430.981 391.877 430.448 391.344 429.381 391.344 cv
165.019 391.344 li
163.952 391.344 163.419 391.877 163.419 392.944 cv
163.419 403.894 li
163.419 404.961 163.952 405.494 165.019 405.494 cv
cp
@
163.019 403.494 mo
427.381 403.494 li
428.448 403.494 428.981 402.961 428.981 401.894 cv
428.981 390.944 li
428.981 389.877 428.448 389.344 427.381 389.344 cv
163.019 389.344 li
161.952 389.344 161.419 389.877 161.419 390.944 cv
161.419 401.894 li
161.419 402.961 161.952 403.494 163.019 403.494 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
163.019 403.494 mo
427.381 403.494 li
428.448 403.494 428.981 402.961 428.981 401.894 cv
428.981 390.944 li
428.981 389.877 428.448 389.344 427.381 389.344 cv
163.019 389.344 li
161.952 389.344 161.419 389.877 161.419 390.944 cv
161.419 401.894 li
161.419 402.961 161.952 403.494 163.019 403.494 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
164.619 398.622 mo
180.619 398.622 li
180.619 393.022 li
164.619 393.022 li
cp
.29749 .13431 1 .00180056 cmyk
f
164.619 398.622 mo
180.619 398.622 li
180.619 393.022 li
164.619 393.022 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
188.595 393.438 mo
188.595 395.63 li
189.587 395.63 li
189.955 395.63 190.235 395.542 190.435 395.35 cv
190.635 395.158 190.739 394.886 190.739 394.534 cv
190.739 394.182 190.635 393.918 190.435 393.726 cv
190.235 393.534 189.955 393.438 189.587 393.438 cv
188.595 393.438 li
187.803 392.79 mo
189.587 392.79 li
190.235 392.79 190.731 392.942 191.067 393.238 cv
191.403 393.534 191.571 393.966 191.571 394.534 cv
191.571 395.11 191.403 395.55 191.067 395.838 cv
190.731 396.134 190.235 396.278 189.587 396.278 cv
188.595 396.278 li
188.595 398.622 li
187.803 398.622 li
187.803 392.79 li
.750179 .679652 .670191 .901488 cmyk
ef
196.234 395.982 mo
196.234 398.622 li
195.514 398.622 li
195.514 396.006 li
195.514 395.59 195.426 395.286 195.266 395.078 cv
195.106 394.87 194.866 394.766 194.546 394.766 cv
194.154 394.766 193.85 394.894 193.626 395.142 cv
193.402 395.39 193.29 395.726 193.29 396.15 cv
193.29 398.622 li
192.57 398.622 li
192.57 392.542 li
193.29 392.542 li
193.29 394.926 li
193.458 394.67 193.658 394.47 193.898 394.342 cv
194.13 394.214 194.402 394.142 194.706 394.142 cv
195.202 394.142 195.586 394.302 195.842 394.614 cv
196.098 394.926 196.234 395.382 196.234 395.982 cv
ef
199.657 396.422 mo
199.073 396.422 198.673 396.494 198.449 396.622 cv
198.225 396.758 198.113 396.982 198.113 397.302 cv
198.113 397.558 198.193 397.766 198.361 397.91 cv
198.529 398.062 198.761 398.134 199.049 398.134 cv
199.449 398.134 199.769 397.998 200.009 397.71 cv
200.249 397.43 200.369 397.054 200.369 396.582 cv
200.369 396.422 li
199.657 396.422 li
201.089 396.126 mo
201.089 398.622 li
200.369 398.622 li
200.369 397.958 li
200.201 398.23 199.993 398.422 199.753 398.542 cv
199.513 398.662 199.209 398.726 198.857 398.726 cv
198.409 398.726 198.049 398.606 197.785 398.358 cv
197.521 398.11 197.393 397.774 197.393 397.35 cv
197.393 396.862 197.553 396.494 197.889 396.238 cv
198.217 395.99 198.705 395.862 199.361 395.862 cv
200.369 395.862 li
200.369 395.79 li
200.369 395.462 200.257 395.206 200.041 395.022 cv
199.825 394.846 199.521 394.75 199.129 394.75 cv
198.873 394.75 198.633 394.782 198.393 394.846 cv
198.153 394.91 197.929 394.998 197.713 395.11 cv
197.713 394.446 li
197.969 394.35 198.225 394.27 198.473 394.222 cv
198.721 394.174 198.961 394.142 199.201 394.142 cv
199.833 394.142 200.305 394.31 200.617 394.638 cv
200.929 394.966 201.089 395.462 201.089 396.126 cv
ef
205.36 394.374 mo
205.36 395.054 li
205.152 394.958 204.944 394.878 204.728 394.822 cv
204.504 394.774 204.28 394.742 204.048 394.742 cv
203.688 394.742 203.416 394.798 203.24 394.91 cv
203.064 395.022 202.976 395.182 202.976 395.398 cv
202.976 395.566 203.04 395.694 203.168 395.79 cv
203.296 395.886 203.552 395.982 203.936 396.062 cv
204.184 396.118 li
204.696 396.23 205.056 396.39 205.272 396.582 cv
205.48 396.782 205.592 397.062 205.592 397.414 cv
205.592 397.822 205.432 398.142 205.112 398.374 cv
204.792 398.614 204.344 398.726 203.784 398.726 cv
203.544 398.726 203.304 398.702 203.048 398.662 cv
202.792 398.622 202.528 398.558 202.248 398.462 cv
202.248 397.718 li
202.512 397.862 202.776 397.966 203.032 398.03 cv
203.288 398.102 203.544 398.134 203.8 398.134 cv
204.136 398.134 204.4 398.078 204.584 397.966 cv
204.76 397.854 204.856 397.686 204.856 397.47 cv
204.856 397.278 204.784 397.126 204.656 397.022 cv
204.528 396.918 204.24 396.814 203.792 396.718 cv
203.544 396.662 li
203.096 396.566 202.768 396.422 202.576 396.23 cv
202.376 396.038 202.28 395.774 202.28 395.43 cv
202.28 395.022 202.424 394.702 202.712 394.478 cv
203 394.254 203.416 394.142 203.96 394.142 cv
204.224 394.142 204.472 394.166 204.712 394.206 cv
204.944 394.246 205.16 394.302 205.36 394.374 cv
ef
210.48 396.254 mo
210.48 396.606 li
207.176 396.606 li
207.208 397.102 207.352 397.486 207.624 397.742 cv
207.887 397.998 208.255 398.126 208.736 398.126 cv
209.008 398.126 209.279 398.094 209.536 398.03 cv
209.792 397.966 210.055 397.862 210.311 397.718 cv
210.311 398.398 li
210.055 398.51 209.792 398.598 209.52 398.646 cv
209.247 398.694 208.967 398.726 208.695 398.726 cv
207.992 398.726 207.439 398.526 207.031 398.126 cv
206.624 397.726 206.423 397.174 206.423 396.478 cv
206.423 395.766 206.615 395.198 206.999 394.774 cv
207.383 394.358 207.911 394.142 208.568 394.142 cv
209.16 394.142 209.624 394.334 209.967 394.71 cv
210.303 395.094 210.48 395.606 210.48 396.254 cv
209.76 396.046 mo
209.751 395.654 209.639 395.342 209.432 395.102 cv
209.215 394.87 208.928 394.75 208.576 394.75 cv
208.176 394.75 207.855 394.87 207.615 395.094 cv
207.376 395.318 207.232 395.638 207.199 396.046 cv
209.76 396.046 li
ef
214.44 397.958 mo
215.728 397.958 li
215.728 393.51 li
214.328 393.79 li
214.328 393.07 li
215.72 392.79 li
216.512 392.79 li
216.512 397.958 li
217.8 397.958 li
217.8 398.622 li
214.44 398.622 li
214.44 397.958 li
ef
233.831 398.622 mo
249.831 398.622 li
249.831 393.022 li
233.831 393.022 li
cp
.878965 .246067 1 .134279 cmyk
f
233.831 398.622 mo
249.831 398.622 li
249.831 393.022 li
233.831 393.022 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
257.807 393.438 mo
257.807 395.63 li
258.799 395.63 li
259.167 395.63 259.447 395.542 259.647 395.35 cv
259.847 395.158 259.951 394.886 259.951 394.534 cv
259.951 394.182 259.847 393.918 259.647 393.726 cv
259.447 393.534 259.167 393.438 258.799 393.438 cv
257.807 393.438 li
257.015 392.79 mo
258.799 392.79 li
259.447 392.79 259.943 392.942 260.279 393.238 cv
260.615 393.534 260.783 393.966 260.783 394.534 cv
260.783 395.11 260.615 395.55 260.279 395.838 cv
259.943 396.134 259.447 396.278 258.799 396.278 cv
257.807 396.278 li
257.807 398.622 li
257.015 398.622 li
257.015 392.79 li
.750179 .679652 .670191 .901488 cmyk
ef
265.447 395.982 mo
265.447 398.622 li
264.727 398.622 li
264.727 396.006 li
264.727 395.59 264.638 395.286 264.478 395.078 cv
264.319 394.87 264.078 394.766 263.759 394.766 cv
263.366 394.766 263.063 394.894 262.839 395.142 cv
262.615 395.39 262.503 395.726 262.503 396.15 cv
262.503 398.622 li
261.783 398.622 li
261.783 392.542 li
262.503 392.542 li
262.503 394.926 li
262.671 394.67 262.871 394.47 263.111 394.342 cv
263.342 394.214 263.615 394.142 263.918 394.142 cv
264.414 394.142 264.798 394.302 265.055 394.614 cv
265.31 394.926 265.447 395.382 265.447 395.982 cv
ef
268.87 396.422 mo
268.286 396.422 267.886 396.494 267.662 396.622 cv
267.438 396.758 267.326 396.982 267.326 397.302 cv
267.326 397.558 267.406 397.766 267.574 397.91 cv
267.742 398.062 267.974 398.134 268.262 398.134 cv
268.662 398.134 268.982 397.998 269.222 397.71 cv
269.462 397.43 269.582 397.054 269.582 396.582 cv
269.582 396.422 li
268.87 396.422 li
270.302 396.126 mo
270.302 398.622 li
269.582 398.622 li
269.582 397.958 li
269.414 398.23 269.206 398.422 268.966 398.542 cv
268.726 398.662 268.422 398.726 268.07 398.726 cv
267.622 398.726 267.262 398.606 266.998 398.358 cv
266.734 398.11 266.606 397.774 266.606 397.35 cv
266.606 396.862 266.766 396.494 267.102 396.238 cv
267.43 395.99 267.918 395.862 268.574 395.862 cv
269.582 395.862 li
269.582 395.79 li
269.582 395.462 269.47 395.206 269.254 395.022 cv
269.038 394.846 268.734 394.75 268.342 394.75 cv
268.086 394.75 267.846 394.782 267.606 394.846 cv
267.366 394.91 267.142 394.998 266.926 395.11 cv
266.926 394.446 li
267.182 394.35 267.438 394.27 267.686 394.222 cv
267.934 394.174 268.174 394.142 268.414 394.142 cv
269.046 394.142 269.518 394.31 269.83 394.638 cv
270.142 394.966 270.302 395.462 270.302 396.126 cv
ef
274.573 394.374 mo
274.573 395.054 li
274.365 394.958 274.157 394.878 273.941 394.822 cv
273.717 394.774 273.493 394.742 273.261 394.742 cv
272.901 394.742 272.629 394.798 272.453 394.91 cv
272.277 395.022 272.189 395.182 272.189 395.398 cv
272.189 395.566 272.253 395.694 272.381 395.79 cv
272.509 395.886 272.765 395.982 273.149 396.062 cv
273.397 396.118 li
273.909 396.23 274.269 396.39 274.485 396.582 cv
274.693 396.782 274.805 397.062 274.805 397.414 cv
274.805 397.822 274.645 398.142 274.325 398.374 cv
274.005 398.614 273.557 398.726 272.997 398.726 cv
272.757 398.726 272.517 398.702 272.261 398.662 cv
272.005 398.622 271.741 398.558 271.461 398.462 cv
271.461 397.718 li
271.725 397.862 271.989 397.966 272.245 398.03 cv
272.501 398.102 272.757 398.134 273.013 398.134 cv
273.349 398.134 273.613 398.078 273.797 397.966 cv
273.973 397.854 274.069 397.686 274.069 397.47 cv
274.069 397.278 273.997 397.126 273.869 397.022 cv
273.741 396.918 273.453 396.814 273.005 396.718 cv
272.757 396.662 li
272.309 396.566 271.981 396.422 271.789 396.23 cv
271.589 396.038 271.493 395.774 271.493 395.43 cv
271.493 395.022 271.637 394.702 271.925 394.478 cv
272.213 394.254 272.629 394.142 273.173 394.142 cv
273.437 394.142 273.685 394.166 273.925 394.206 cv
274.157 394.246 274.373 394.302 274.573 394.374 cv
ef
279.692 396.254 mo
279.692 396.606 li
276.388 396.606 li
276.42 397.102 276.564 397.486 276.836 397.742 cv
277.1 397.998 277.468 398.126 277.948 398.126 cv
278.22 398.126 278.492 398.094 278.748 398.03 cv
279.004 397.966 279.268 397.862 279.524 397.718 cv
279.524 398.398 li
279.268 398.51 279.004 398.598 278.732 398.646 cv
278.46 398.694 278.18 398.726 277.908 398.726 cv
277.204 398.726 276.652 398.526 276.244 398.126 cv
275.836 397.726 275.636 397.174 275.636 396.478 cv
275.636 395.766 275.828 395.198 276.212 394.774 cv
276.596 394.358 277.124 394.142 277.78 394.142 cv
278.372 394.142 278.836 394.334 279.18 394.71 cv
279.516 395.094 279.692 395.606 279.692 396.254 cv
278.972 396.046 mo
278.964 395.654 278.852 395.342 278.644 395.102 cv
278.428 394.87 278.14 394.75 277.788 394.75 cv
277.388 394.75 277.068 394.87 276.828 395.094 cv
276.588 395.318 276.444 395.638 276.412 396.046 cv
278.972 396.046 li
ef
284.197 397.958 mo
286.949 397.958 li
286.949 398.622 li
283.245 398.622 li
283.245 397.958 li
283.541 397.654 283.949 397.238 284.469 396.71 cv
284.981 396.19 285.309 395.854 285.445 395.702 cv
285.701 395.422 285.877 395.182 285.973 394.982 cv
286.069 394.79 286.125 394.59 286.125 394.398 cv
286.125 394.094 286.013 393.838 285.797 393.646 cv
285.581 393.454 285.301 393.35 284.949 393.35 cv
284.701 393.35 284.437 393.398 284.165 393.478 cv
283.893 393.566 283.597 393.694 283.285 393.87 cv
283.285 393.07 li
283.605 392.942 283.901 392.846 284.173 392.782 cv
284.445 392.718 284.701 392.686 284.933 392.686 cv
285.533 392.686 286.013 392.838 286.373 393.142 cv
286.733 393.446 286.917 393.846 286.917 394.35 cv
286.917 394.59 286.869 394.822 286.781 395.03 cv
286.693 395.246 286.533 395.502 286.293 395.79 cv
286.229 395.87 286.021 396.086 285.669 396.446 cv
285.317 396.806 284.829 397.31 284.197 397.958 cv
ef
302.981 398.622 mo
318.981 398.622 li
318.981 393.022 li
302.981 393.022 li
cp
.895628 .7673 0 0 cmyk
f
302.981 398.622 mo
318.981 398.622 li
318.981 393.022 li
302.981 393.022 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
326.957 393.438 mo
326.957 395.63 li
327.949 395.63 li
328.317 395.63 328.597 395.542 328.797 395.35 cv
328.997 395.158 329.101 394.886 329.101 394.534 cv
329.101 394.182 328.997 393.918 328.797 393.726 cv
328.597 393.534 328.317 393.438 327.949 393.438 cv
326.957 393.438 li
326.165 392.79 mo
327.949 392.79 li
328.597 392.79 329.093 392.942 329.429 393.238 cv
329.765 393.534 329.933 393.966 329.933 394.534 cv
329.933 395.11 329.765 395.55 329.429 395.838 cv
329.093 396.134 328.597 396.278 327.949 396.278 cv
326.957 396.278 li
326.957 398.622 li
326.165 398.622 li
326.165 392.79 li
.750179 .679652 .670191 .901488 cmyk
ef
334.596 395.982 mo
334.596 398.622 li
333.876 398.622 li
333.876 396.006 li
333.876 395.59 333.788 395.286 333.628 395.078 cv
333.468 394.87 333.228 394.766 332.908 394.766 cv
332.516 394.766 332.212 394.894 331.988 395.142 cv
331.764 395.39 331.652 395.726 331.652 396.15 cv
331.652 398.622 li
330.932 398.622 li
330.932 392.542 li
331.652 392.542 li
331.652 394.926 li
331.82 394.67 332.02 394.47 332.26 394.342 cv
332.492 394.214 332.764 394.142 333.068 394.142 cv
333.564 394.142 333.948 394.302 334.204 394.614 cv
334.46 394.926 334.596 395.382 334.596 395.982 cv
ef
338.02 396.422 mo
337.436 396.422 337.036 396.494 336.812 396.622 cv
336.588 396.758 336.476 396.982 336.476 397.302 cv
336.476 397.558 336.556 397.766 336.724 397.91 cv
336.892 398.062 337.124 398.134 337.412 398.134 cv
337.812 398.134 338.132 397.998 338.372 397.71 cv
338.612 397.43 338.732 397.054 338.732 396.582 cv
338.732 396.422 li
338.02 396.422 li
339.452 396.126 mo
339.452 398.622 li
338.732 398.622 li
338.732 397.958 li
338.564 398.23 338.356 398.422 338.116 398.542 cv
337.876 398.662 337.572 398.726 337.22 398.726 cv
336.772 398.726 336.412 398.606 336.148 398.358 cv
335.884 398.11 335.756 397.774 335.756 397.35 cv
335.756 396.862 335.916 396.494 336.252 396.238 cv
336.58 395.99 337.068 395.862 337.724 395.862 cv
338.732 395.862 li
338.732 395.79 li
338.732 395.462 338.62 395.206 338.404 395.022 cv
338.188 394.846 337.884 394.75 337.492 394.75 cv
337.236 394.75 336.996 394.782 336.756 394.846 cv
336.516 394.91 336.292 394.998 336.076 395.11 cv
336.076 394.446 li
336.332 394.35 336.588 394.27 336.836 394.222 cv
337.084 394.174 337.324 394.142 337.564 394.142 cv
338.196 394.142 338.668 394.31 338.98 394.638 cv
339.292 394.966 339.452 395.462 339.452 396.126 cv
ef
343.723 394.374 mo
343.723 395.054 li
343.515 394.958 343.307 394.878 343.091 394.822 cv
342.867 394.774 342.643 394.742 342.411 394.742 cv
342.051 394.742 341.779 394.798 341.603 394.91 cv
341.427 395.022 341.339 395.182 341.339 395.398 cv
341.339 395.566 341.403 395.694 341.531 395.79 cv
341.659 395.886 341.915 395.982 342.299 396.062 cv
342.547 396.118 li
343.059 396.23 343.419 396.39 343.635 396.582 cv
343.843 396.782 343.955 397.062 343.955 397.414 cv
343.955 397.822 343.795 398.142 343.475 398.374 cv
343.155 398.614 342.707 398.726 342.147 398.726 cv
341.907 398.726 341.667 398.702 341.411 398.662 cv
341.155 398.622 340.891 398.558 340.611 398.462 cv
340.611 397.718 li
340.875 397.862 341.139 397.966 341.395 398.03 cv
341.651 398.102 341.907 398.134 342.163 398.134 cv
342.499 398.134 342.763 398.078 342.947 397.966 cv
343.123 397.854 343.219 397.686 343.219 397.47 cv
343.219 397.278 343.147 397.126 343.019 397.022 cv
342.891 396.918 342.603 396.814 342.155 396.718 cv
341.907 396.662 li
341.459 396.566 341.131 396.422 340.939 396.23 cv
340.739 396.038 340.643 395.774 340.643 395.43 cv
340.643 395.022 340.787 394.702 341.075 394.478 cv
341.363 394.254 341.779 394.142 342.323 394.142 cv
342.587 394.142 342.835 394.166 343.075 394.206 cv
343.307 394.246 343.523 394.302 343.723 394.374 cv
ef
348.842 396.254 mo
348.842 396.606 li
345.538 396.606 li
345.57 397.102 345.714 397.486 345.986 397.742 cv
346.25 397.998 346.618 398.126 347.098 398.126 cv
347.37 398.126 347.642 398.094 347.898 398.03 cv
348.154 397.966 348.418 397.862 348.674 397.718 cv
348.674 398.398 li
348.418 398.51 348.154 398.598 347.882 398.646 cv
347.61 398.694 347.33 398.726 347.058 398.726 cv
346.354 398.726 345.802 398.526 345.394 398.126 cv
344.986 397.726 344.786 397.174 344.786 396.478 cv
344.786 395.766 344.978 395.198 345.362 394.774 cv
345.746 394.358 346.274 394.142 346.93 394.142 cv
347.522 394.142 347.986 394.334 348.33 394.71 cv
348.666 395.094 348.842 395.606 348.842 396.254 cv
348.122 396.046 mo
348.114 395.654 348.002 395.342 347.794 395.102 cv
347.578 394.87 347.29 394.75 346.938 394.75 cv
346.538 394.75 346.218 394.87 345.978 395.094 cv
345.738 395.318 345.594 395.638 345.562 396.046 cv
348.122 396.046 li
ef
355.059 395.478 mo
355.435 395.558 355.731 395.726 355.939 395.982 cv
356.147 396.238 356.259 396.558 356.259 396.926 cv
356.259 397.502 356.059 397.95 355.667 398.262 cv
355.267 398.574 354.707 398.726 353.979 398.726 cv
353.731 398.726 353.475 398.702 353.219 398.654 cv
352.963 398.614 352.691 398.542 352.419 398.446 cv
352.419 397.686 li
352.635 397.814 352.875 397.91 353.139 397.974 cv
353.395 398.038 353.667 398.07 353.955 398.07 cv
354.451 398.07 354.827 397.974 355.083 397.782 cv
355.339 397.59 355.475 397.302 355.475 396.926 cv
355.475 396.59 355.355 396.318 355.115 396.126 cv
354.875 395.934 354.539 395.83 354.107 395.83 cv
353.427 395.83 li
353.427 395.182 li
354.139 395.182 li
354.523 395.182 354.819 395.11 355.027 394.95 cv
355.235 394.798 355.339 394.574 355.339 394.278 cv
355.339 393.982 355.227 393.75 355.019 393.59 cv
354.803 393.43 354.499 393.35 354.107 393.35 cv
353.891 393.35 353.659 393.374 353.411 393.422 cv
353.163 393.47 352.891 393.542 352.595 393.638 cv
352.595 392.934 li
352.891 392.854 353.171 392.79 353.435 392.75 cv
353.691 392.71 353.939 392.686 354.179 392.686 cv
354.771 392.686 355.243 392.822 355.595 393.094 cv
355.947 393.366 356.123 393.734 356.123 394.198 cv
356.123 394.518 356.027 394.79 355.843 395.014 cv
355.659 395.238 355.395 395.398 355.059 395.478 cv
ef
372.288 398.622 mo
388.288 398.622 li
388.288 393.022 li
372.288 393.022 li
cp
0 .990631 1 .000396735 cmyk
f
372.288 398.622 mo
388.288 398.622 li
388.288 393.022 li
372.288 393.022 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
396.263 393.438 mo
396.263 395.63 li
397.255 395.63 li
397.624 395.63 397.904 395.542 398.103 395.35 cv
398.303 395.158 398.408 394.886 398.408 394.534 cv
398.408 394.182 398.303 393.918 398.103 393.726 cv
397.904 393.534 397.624 393.438 397.255 393.438 cv
396.263 393.438 li
395.471 392.79 mo
397.255 392.79 li
397.904 392.79 398.4 392.942 398.736 393.238 cv
399.072 393.534 399.24 393.966 399.24 394.534 cv
399.24 395.11 399.072 395.55 398.736 395.838 cv
398.4 396.134 397.904 396.278 397.255 396.278 cv
396.263 396.278 li
396.263 398.622 li
395.471 398.622 li
395.471 392.79 li
.750179 .679652 .670191 .901488 cmyk
ef
403.903 395.982 mo
403.903 398.622 li
403.183 398.622 li
403.183 396.006 li
403.183 395.59 403.095 395.286 402.935 395.078 cv
402.775 394.87 402.535 394.766 402.215 394.766 cv
401.823 394.766 401.519 394.894 401.295 395.142 cv
401.071 395.39 400.959 395.726 400.959 396.15 cv
400.959 398.622 li
400.239 398.622 li
400.239 392.542 li
400.959 392.542 li
400.959 394.926 li
401.127 394.67 401.327 394.47 401.567 394.342 cv
401.799 394.214 402.071 394.142 402.375 394.142 cv
402.871 394.142 403.255 394.302 403.511 394.614 cv
403.767 394.926 403.903 395.382 403.903 395.982 cv
ef
407.326 396.422 mo
406.742 396.422 406.342 396.494 406.118 396.622 cv
405.894 396.758 405.782 396.982 405.782 397.302 cv
405.782 397.558 405.862 397.766 406.03 397.91 cv
406.198 398.062 406.43 398.134 406.718 398.134 cv
407.118 398.134 407.438 397.998 407.678 397.71 cv
407.918 397.43 408.038 397.054 408.038 396.582 cv
408.038 396.422 li
407.326 396.422 li
408.758 396.126 mo
408.758 398.622 li
408.038 398.622 li
408.038 397.958 li
407.87 398.23 407.662 398.422 407.422 398.542 cv
407.182 398.662 406.878 398.726 406.526 398.726 cv
406.078 398.726 405.718 398.606 405.454 398.358 cv
405.19 398.11 405.062 397.774 405.062 397.35 cv
405.062 396.862 405.222 396.494 405.558 396.238 cv
405.886 395.99 406.374 395.862 407.03 395.862 cv
408.038 395.862 li
408.038 395.79 li
408.038 395.462 407.926 395.206 407.71 395.022 cv
407.494 394.846 407.19 394.75 406.798 394.75 cv
406.542 394.75 406.302 394.782 406.062 394.846 cv
405.822 394.91 405.598 394.998 405.382 395.11 cv
405.382 394.446 li
405.638 394.35 405.894 394.27 406.142 394.222 cv
406.39 394.174 406.63 394.142 406.87 394.142 cv
407.502 394.142 407.974 394.31 408.286 394.638 cv
408.598 394.966 408.758 395.462 408.758 396.126 cv
ef
413.029 394.374 mo
413.029 395.054 li
412.821 394.958 412.613 394.878 412.397 394.822 cv
412.173 394.774 411.949 394.742 411.717 394.742 cv
411.357 394.742 411.085 394.798 410.909 394.91 cv
410.733 395.022 410.645 395.182 410.645 395.398 cv
410.645 395.566 410.709 395.694 410.837 395.79 cv
410.965 395.886 411.221 395.982 411.605 396.062 cv
411.853 396.118 li
412.365 396.23 412.725 396.39 412.941 396.582 cv
413.149 396.782 413.261 397.062 413.261 397.414 cv
413.261 397.822 413.101 398.142 412.781 398.374 cv
412.461 398.614 412.013 398.726 411.453 398.726 cv
411.213 398.726 410.973 398.702 410.717 398.662 cv
410.461 398.622 410.197 398.558 409.917 398.462 cv
409.917 397.718 li
410.181 397.862 410.445 397.966 410.701 398.03 cv
410.957 398.102 411.213 398.134 411.469 398.134 cv
411.805 398.134 412.069 398.078 412.253 397.966 cv
412.429 397.854 412.525 397.686 412.525 397.47 cv
412.525 397.278 412.453 397.126 412.325 397.022 cv
412.197 396.918 411.909 396.814 411.461 396.718 cv
411.213 396.662 li
410.765 396.566 410.437 396.422 410.245 396.23 cv
410.045 396.038 409.949 395.774 409.949 395.43 cv
409.949 395.022 410.093 394.702 410.381 394.478 cv
410.669 394.254 411.085 394.142 411.629 394.142 cv
411.893 394.142 412.141 394.166 412.381 394.206 cv
412.613 394.246 412.829 394.302 413.029 394.374 cv
ef
418.148 396.254 mo
418.148 396.606 li
414.844 396.606 li
414.876 397.102 415.02 397.486 415.292 397.742 cv
415.556 397.998 415.924 398.126 416.404 398.126 cv
416.676 398.126 416.948 398.094 417.204 398.03 cv
417.46 397.966 417.724 397.862 417.98 397.718 cv
417.98 398.398 li
417.724 398.51 417.46 398.598 417.188 398.646 cv
416.916 398.694 416.636 398.726 416.364 398.726 cv
415.66 398.726 415.108 398.526 414.7 398.126 cv
414.292 397.726 414.092 397.174 414.092 396.478 cv
414.092 395.766 414.284 395.198 414.668 394.774 cv
415.052 394.358 415.58 394.142 416.236 394.142 cv
416.828 394.142 417.292 394.334 417.636 394.71 cv
417.972 395.094 418.148 395.606 418.148 396.254 cv
417.428 396.046 mo
417.42 395.654 417.308 395.342 417.1 395.102 cv
416.884 394.87 416.596 394.75 416.244 394.75 cv
415.844 394.75 415.524 394.87 415.284 395.094 cv
415.044 395.318 414.9 395.638 414.868 396.046 cv
417.428 396.046 li
ef
424.141 393.478 mo
422.149 396.59 li
424.141 396.59 li
424.141 393.478 li
423.933 392.79 mo
424.925 392.79 li
424.925 396.59 li
425.757 396.59 li
425.757 397.246 li
424.925 397.246 li
424.925 398.622 li
424.141 398.622 li
424.141 397.246 li
421.509 397.246 li
421.509 396.486 li
423.933 392.79 li
ef
grestore
grestore
grestore
pgrs
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
